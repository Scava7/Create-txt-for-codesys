
////////////////////////////////////////////////////////////
// PAR BOOL
////////////////////////////////////////////////////////////

(*Network devices presence configuration*)          IO.Network.CAN.Cfg._20_CR2012_MC_Present                 := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[0]  ; // CR2012 MC Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[1]  ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[2]  ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[3]  ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[4]  ; // Spare
(*Network devices presence configuration*)          IO.Network.CAN.Cfg._05_CR2016_CommandPlank_Present       := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[5]  ; // CR2016 COMMAND PLANK Present
(*Network devices presence configuration*)          IO.Network.CAN.Cfg._06_CR2016_OC_Present                 := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[6]  ; // CR2016 OC Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[7]  ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[8]  ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[9]  ; // Spare
(*Network devices presence configuration*)          IO.Network.CAN.Cfg._15_CR2050_Hydr_Present               := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[10] ; // CR2050 HYDRAULIC Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[11] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[12] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[13] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[14] ; // Spare
(*Network devices presence configuration*)          IO.Network.CAN.Cfg.Propeller_Joystick_Present            := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[15] ; // PROPELLER JOYSTICK Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[16] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[17] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[18] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[19] ; // Spare
(*Network devices presence configuration*)          IO.Network.CAN.Cfg.Hull_Inclinometer_Present             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[20] ; // INCLINOMETER Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[21] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[22] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[23] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[24] ; // Spare
(*Network devices presence configuration*)          IO.Network.CAN.Cfg.Propeller_Encoder_Present             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[25] ; // ENCODER PROPELLER Present
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[26] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[27] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[28] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[29] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[30] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[31] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[32] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[33] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[34] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[35] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[36] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[37] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[38] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[39] ; // Spare
(*Network devices presence configuration*)          IO.Network.DataCollection.Cfg.Exor_Present               := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[40] ; // Data collection EXOR
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[41] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[42] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[43] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[44] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[45] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[46] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[47] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[48] ; // Spare
(*Network devices presence configuration*)          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[49] ; // Spare
(*Sensor presence configuration*)                        IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Sensor_Present := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[50] ; // Pressure sensor PRESENT dredging pump oil main circuit
(*Sensor presence configuration*)                      IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Sensor_Present := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[51] ; // Pressure sensor PRESENT dredging pump oil secondary circuit
(*Sensor presence configuration*)                   IO.Excavators.Cfg.Oil_Pressure.Sensor_Present            := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[52] ; // Pressure sensor PRESENT excavators oil circuit
(*Sensor presence configuration*)                   IO.Pvg_Services.Cfg.Oil_Pressure.Sensor_Present          := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[53] ; // Pressure sensor PRESENT PVG services oil circuit
(*Sensor presence configuration*)                            IO.Hoist.Cfg.Oil_Pressure.Sensor_Present        := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[54] ; // Pressure sensor PRESENT Hoist oil circuit
(*Sensor presence configuration*)                            IO.Propeller.Cfg.Oil_Pressure.Sensor_Present    := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[55] ; // Pressure sensor PRESENT Propeller oil circuit
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[56] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[57] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[58] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[59] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[60] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[61] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[62] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[63] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[64] ; // Spare
(*Sensor presence configuration*)                   IO.Pump_Dredge.Cfg.Oil_Flow.Sensor_Present               := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[65] ; // Flometer sensor PRESENT dredging pump oil circuit
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[66] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[67] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[68] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[69] ; // Spare
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_1_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[70] ; // Filter 1 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_2_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[71] ; // Filter 2 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_3_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[72] ; // Filter 3 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_4_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[73] ; // Filter 4 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_5_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[74] ; // Filter 5 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_6_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[75] ; // Filter 6 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_7_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[76] ; // Filter 7 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_8_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[77] ; // Filter 8 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_9_Present                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[78] ; // Filter 9 Present
(*Sensor presence configuration*)                   IO.Oil.Cfg.Filter_10_Present                             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[79] ; // Filter 10 Present
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[80] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[81] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[82] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[83] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[84] ; // Spare
(*Sensor presence configuration*)                            IO.Hoist.Cfg.Encoder_Depth.Sensor_Present       := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[85] ; // Encoder pump depth present
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[86] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[87] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[88] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[89] ; // Spare
(*Sensor presence configuration*)                   IO.Slurry.Cfg.Flow_Sensor.Sensor_Present                 := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[90] ; // Flometer sensor PRESENT slurry    
(*Sensor presence configuration*)                   IO.Slurry.Cfg.Density_Sensor.Sensor_Present              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[91] ; // Density sensor PRESENT slurry
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[92] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[93] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[94] ; // Spare
(*Sensor presence configuration*)                 IO.Fuel_Tank.Cfg.Level_Sensor_1.Sensor_Present             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[95] ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)                 IO.Fuel_Tank.Cfg.Level_Sensor_2.Sensor_Present             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[96] ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[97] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[98] ; // Spare
(*Sensor presence configuration*)                   x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[99] ; // Spare
(*Sensor/Commands analog/digital config*)           IO.Oil.Cfg.Temp_Analog.Sensor_Present                    := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[100]; // Temperature oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)           IO.Oil.Cfg.Level_Analog.Sensor_Present                   := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[101]; // Level oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[102]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[103]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[104]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[105]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[106]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[107]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[108]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[109]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[110]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[111]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[112]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[113]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[114]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[115]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[116]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[117]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[118]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[119]; // Spare
(*Sensor/Commands analog/digital config*)           IO.Pump_Dredge.Cfg.Command_Type.Analog                   := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[120]; // Dredge Pump Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)           IO.Excavators.Cfg.Command_Type.Analog                    := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[121]; // Excavators Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[122]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[123]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[124]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[125]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[126]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[127]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[128]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[129]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[130]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[131]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[132]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[133]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[134]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[135]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[136]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[137]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[138]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[139]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[140]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[141]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[142]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[143]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[144]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[145]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[146]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[147]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[148]; // Spare
(*Sensor/Commands analog/digital config*)           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[149]; // Spare
(*Bypass signals*)                                IO.Pump_Dredge.Hmi.Bypass_Pressure_Sensor_Oil_Main_Circuit := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[150]; // Bypass dredging pump main pressure transducer
(*Bypass signals*)                                 IO.Pump_Dredge.Hmi.Bypass_Pressure_Sensor_Oil_Sec_Circuit := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[151]; // Bypass dredging pump secondary pressure transducer
(*Bypass signals*)                                  IO.Excavators.Hmi.Bypass_Pressure_Sensor_Oil_Circuit     := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[152]; // Bypass excavators pressure transducer
(*Bypass signals*)                                  IO.Pvg_Services.Hmi.Bypass_Pressure_Sensor_Oil_Circuit   := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[153]; // Bypass hydraulic services PVG pressure transducer
(*Bypass signals*)                                           IO.Hoist.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[154]; // Bypass hoist pressure transducer
(*Bypass signals*)                                       IO.Propeller.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[155]; // Bypass propeller pressure transducer
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[156]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[157]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[158]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[159]; // Spare
(*Bypass signals*)                                  IO.Pump_Dredge.Hmi.Bypass_Flowmeter_Oil_Circuit          := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[160]; // Oil flowmeter dredging pump
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[161]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[162]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[163]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[164]; // Spare
(*Bypass signals*)                                  IO.Fuel_Tank.Hmi.Bypass_Level_Sensor                     := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[165]; // Fuel tank level
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[166]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[167]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[168]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[169]; // Spare
(*Bypass signals*)                                  IO.Oil.Hmi.Bypass_Temp                                   := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[170]; // Oil temperature
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[171]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[172]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[173]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[174]; // Spare
(*Bypass signals*)                                  IO.Oil.Hmi.Bypass_Level                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[175]; // Oil level
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[176]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[177]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[178]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[179]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[180]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[181]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[182]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[183]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[184]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[185]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[186]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[187]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[188]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[189]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[190]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[191]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[192]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[193]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[194]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[195]; // Spare
(*Bypass signals*)                                        IO.Event.Cfg.Enable_Stop_For_Missing_Comm_RemoteIO := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[196]; // Enable alarm missing communicatrion with remote IO
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[197]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[198]; // Spare
(*Bypass signals*)                                  x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[199]; // Spare
(*Command configuration*)                              IO.Internal_Signal.Cfg.EnableButtonForMovementPresent := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[200]; // The enable button for the movement is present
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[201]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[202]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[203]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[204]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[205]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[206]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[207]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[208]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[209]; // Spare
(*Command configuration*)                           IO.Excavators.Cfg.Present                                := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[210]; // Excavators present
(*Command configuration*)                                                           IO.Propeller.Cfg.Present := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[211]; // Propeller present
(*Command configuration*)                                                               IO.Hoist.Cfg.Present := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[212]; // Hoist present
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[213]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[214]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[215]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[216]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[217]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[218]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[219]; // Spare
(*Command configuration*)                  IO.Pump_Dredge.Cfg.Hydraulic_Cmd.Secondary_Circuit_Always_Enabled := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[220]; // The secondary oil circuit for dredging pump is always enabled
(*Command configuration*)                                          IO.Pump_Dredge.Cfg.DuplomaticValvePresent := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[221]; // The dredging pump is commanded with a duplomatic valve 0-10V
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[222]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[223]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[224]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[225]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[226]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[227]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[228]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[229]; // Spare
(*Command configuration*)                                             IO.Fuel_Tank.Cfg.Percentage_Management := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[230]; // Fuel tank - percentage management
(*Command configuration*)                                                  IO.Fuel_Tank.Cfg.Timer_Management := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[231]; // Fuel tank - timer management
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[232]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[233]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[234]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[235]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[236]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[237]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[238]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[239]; // Spare
(*Command configuration*)                                               IO.Oil.Cfg.Oil_Cooling_Fans_Electric := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[240]; // The oil cooling fans are electric
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[241]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[242]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[243]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[244]; // Spare
(*Command configuration*)                                                   IO.Propeller.Cfg.Enable_AutoZero := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[245]; // Enable auto zeroing of propeller position (left-right)
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[246]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[247]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[248]; // Spare
(*Command configuration*)                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[249]; // Spare
(*Reverse signal or commands*)                               IO.Hoist.Cfg.Direction                          := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[250]; // Hoist reverse direction
(*Reverse signal or commands*)                               IO.Winches.Cfg.FL_Reverse_Direction             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[251]; // Winch FL reverse direction
(*Reverse signal or commands*)                               IO.Winches.Cfg.FR_Reverse_Direction             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[252]; // Winch FR reverse direction
(*Reverse signal or commands*)                               IO.Winches.Cfg.RL_Reverse_Direction             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[253]; // Winch RL reverse direction
(*Reverse signal or commands*)                               IO.Winches.Cfg.RR_Reverse_Direction             := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[254]; // Winch RR reverse direction
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[255]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[256]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[257]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[258]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[259]; // Spare
(*Reverse signal or commands*)                      IO.Excavators.Cfg.Direction                              := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[260]; // Excavators reverse direction
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[261]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[262]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[263]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[264]; // Spare
(*Reverse signal or commands*)                                                    IO.Propeller.Cfg.Direction := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[265]; // Propeller helix reverse direction
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[266]; // Propeller left-right command reverse direction
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[267]; // Propeller up-down command reverse direction
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[268]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[269]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[270]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[271]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[272]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[273]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[274]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[275]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[276]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[277]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[278]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[279]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[280]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[281]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[282]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[283]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[284]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[285]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[286]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[287]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[288]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[289]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[290]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[291]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[292]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[293]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[294]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[295]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[296]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[297]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[298]; // Spare
(*Reverse signal or commands*)                      x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[299]; // Spare
(*Engine*)                                          IO.Engine.Cfg.x_engineSpeedControlEnable                 := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[300]; // TSC1 speed control enable
(*Engine*)                                          IO.Engine.Cfg.x_TSC1_CRCenable                           := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[301]; // TSC1 CRC enable          
(*Engine*)                                                                              IO.Engine.Cfg.StageV := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[302]; // ENGINE STAGE V
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[303]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[304]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[305]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[306]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[307]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[308]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[309]; // Spare
(*Engine*)                                                                   IO.Engine.Cfg.Motor_Brand.Volvo := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[310]; // Volvo Engine
(*Engine*)                                                                     IO.Engine.Cfg.Motor_Brand.CAT := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[311]; // CAT Engine
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[312]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[313]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[314]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[315]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[316]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[317]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[318]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[319]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[320]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[321]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[322]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[323]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[324]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[325]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[326]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[327]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[328]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[329]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[330]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[331]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[332]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[333]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[334]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[335]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[336]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[337]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[338]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[339]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[340]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[341]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[342]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[343]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[344]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[345]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[346]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[347]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[348]; // Spare
(*Engine*)                                          x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[349]; // Spare
(*Spare*)                                                                    IO.Air_Conditioning.Cfg.Present := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[350]; // Air conditioning device present
(*Spare*)                                                          IO.Internal_Signal.Cfg.Inhibit_Switch_Off := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[351]; // Inhibit switch off of panel and plc with ignition
(*Spare*)                                                      IO.MachineMode.Cfg.Enable_Machine_mode_Popups := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[352]; // Enable showing popup for error on machine mode management
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[353]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[354]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[355]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[356]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[357]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[358]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[359]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[360]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[361]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[362]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[363]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[364]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[365]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[366]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[367]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[368]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[369]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[370]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[371]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[372]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[373]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[374]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[375]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[376]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[377]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[378]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[379]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[380]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[381]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[382]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[383]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[384]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[385]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[386]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[387]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[388]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[389]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[390]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[391]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[392]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[393]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[394]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[395]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[396]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[397]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[398]; // Spare
(*Spare*)                                           x_Spare                                                  := _101_From_PLC_to_HMI_Parameters.PAR_BOOL[399]; // Spare

////////////////////////////////////////////////////////////
// PAR INT
////////////////////////////////////////////////////////////

(*Dredging pump*)                            IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampAscendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[1]  ; //[%]     Dredging pump - Ramp ascending percentage step value
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampDescendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[2]  ; //[%]     Dredging pump - Ramp descending percentage step value
(*Dredging pump*)                                      IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampTimeBase := _101_From_PLC_to_HMI_Parameters.PAR_INT[3]  ; //[ms]    Dredging pump - Ramp time base
(*Dredging pump*)                                 IO.Pump_Dredge.Cfg.Hydraulic_Cmd.StartingValuePerc := _101_From_PLC_to_HMI_Parameters.PAR_INT[4]  ; //[%]     Dredging pump - Starting percentage value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[5]  ; //[-]     Spare
(*Dredging pump*)                         IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiFrequency  := _101_From_PLC_to_HMI_Parameters.PAR_INT[6]  ; //[Hz]    Dredging pump - PWM Main command frequency
(*Dredging pump*)                   IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiDitherFrequency  := _101_From_PLC_to_HMI_Parameters.PAR_INT[7]  ; //[-]     Dredging pump - PWM Main dither frequency
(*Dredging pump*)                        IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiDitherValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[8]  ; //[-]     Dredging pump - PWM Main dither value
(*Dredging pump*)                             IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uimA_Min := _101_From_PLC_to_HMI_Parameters.PAR_INT[9]  ; //[mA]    Dredging pump - PWM_I Main minimum current
(*Dredging pump*)                             IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uimA_Max := _101_From_PLC_to_HMI_Parameters.PAR_INT[10] ; //[mA]    Dredging pump - PWM_I Main maximum current
(*Dredging pump*)                       IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiFrequency  := _101_From_PLC_to_HMI_Parameters.PAR_INT[11] ; //[Hz]    Dredging pump - PWM Sec command frequency
(*Dredging pump*)                 IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiDitherFrequency  := _101_From_PLC_to_HMI_Parameters.PAR_INT[12] ; //[-]     Dredging pump - PWM Sec dither frequency
(*Dredging pump*)                      IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiDitherValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[13] ; //[-]     Dredging pump - PWM Sec dither value
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uimA_Min := _101_From_PLC_to_HMI_Parameters.PAR_INT[14] ; //[mA]    Dredging pump - PWM_I Sec minimum current
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uimA_Max := _101_From_PLC_to_HMI_Parameters.PAR_INT[15] ; //[mA]    Dredging pump - PWM_I Sec maximum current
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[16] ; //[-]     Spare
(*Dredging pump*)                                      IO.Pump_Dredge.Cfg.Hydraulic_Cmd.DelayShutOff := _101_From_PLC_to_HMI_Parameters.PAR_INT[17] ; //[s]     Delay to shut off the main valve and avoid undesired movement
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[18] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[19] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[20] ; //[-]     Spare
(*Dredging pump*)                                 IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[21] ; //[mA]    Dredging pump - Pressure sensor minimum raw value main
(*Dredging pump*)                                IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Max_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[22] ; //[mA]    Dredging pump - Pressure sensor maximum raw value main
(*Dredging pump*)                             IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Min_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[23] ; //[bar]   Dredging pump - Pressure minimum scaled value main
(*Dredging pump*)                             IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Max_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[24] ; //[bar]   Dredging pump - Pressure maximum scaled value main
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[25] ; //[-]     Spare
(*Dredging pump*)                                         IO.Pump_Dredge.Cfg.Oil_Flow.Min_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[26] ; //[mA]    Dredging pump - Flow sensor minimum value
(*Dredging pump*)                                          IO.Pump_Dredge.Cfg.Oil_Flow.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[27] ; //[mA]    Dredging pump - Flow sensor maximum value
(*Dredging pump*)                                       IO.Pump_Dredge.Cfg.Oil_Flow.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[28] ; //[l/min] Dredging pump - Flow minimum scaled value
(*Dredging pump*)                                       IO.Pump_Dredge.Cfg.Oil_Flow.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[29] ; //[l/min] Dredging pump - Flow maximum scaled value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[30] ; //[-]     Spare
(*Dredging pump*)                                            IO.Slurry.Cfg.Flow_Sensor.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[31] ; //[mA]    Slurry - Flow sensor minimum value
(*Dredging pump*)                                            IO.Slurry.Cfg.Flow_Sensor.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[32] ; //[mA]    Slurry - Flow sensor maximum value
(*Dredging pump*)                                         IO.Slurry.Cfg.Flow_Sensor.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[33] ; //[m3/h]  Slurry - Flow minimum scaled value
(*Dredging pump*)                                         IO.Slurry.Cfg.Flow_Sensor.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[34] ; //[m3/h]  Slurry - Flow maximum scaled value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[35] ; //[-]     Spare
(*Dredging pump*)                                         IO.Slurry.Cfg.Density_Sensor.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[36] ; //[mA]    Slurry - Density sensor minimum value
(*Dredging pump*)                                         IO.Slurry.Cfg.Density_Sensor.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[37] ; //[mA]    Slurry - Density sensor maximum value
(*Dredging pump*)                                      IO.Slurry.Cfg.Density_Sensor.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[38] ; //[-]     Slurry - Density minimum scaled value
(*Dredging pump*)                                      IO.Slurry.Cfg.Density_Sensor.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[39] ; //[-]     Slurry - Density maximum scaled value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[40] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[41] ; //[%]     Jetring - Ramp ascending percentage step value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[42] ; //[%]     Jetring - Ramp descending percentage step value
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[43] ; //[ms]    Jetring - Ramp time base
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[44] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[45] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[46] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[47] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[48] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[49] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[50] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[51] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[52] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[53] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[54] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[55] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[56] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[57] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[58] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[59] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[60] ; //[-]     Spare
(*Dredging pump*)                               IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[61] ; //[mA]    Dredging pump - Pressure sensor minimum raw value Secondary
(*Dredging pump*)                              IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Max_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[62] ; //[mA]    Dredging pump - Pressure sensor maximum raw value Secondary
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Min_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[63] ; //[bar]   Dredging pump - Pressure minimum scaled value Secondary
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Max_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[64] ; //[bar]   Dredging pump - Pressure maximum scaled value Secondary
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[65] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[66] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[67] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[68] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[69] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[70] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[71] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[72] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[73] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[74] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[75] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[76] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[77] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[78] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[79] ; //[-]     Spare
(*Dredging pump*)                                                                            i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[80] ; //[-]     Spare
(*Excavators*)                                IO.Excavators.Cfg.Hydraulic_Cmd.RampAscendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[81] ; //[incr]  Excavators - Ramp ascending percentage step value
(*Excavators*)                               IO.Excavators.Cfg.Hydraulic_Cmd.RampDescendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[82] ; //[incr]  Excavators - Ramp descending percentage step value
(*Excavators*)                                          IO.Excavators.Cfg.Hydraulic_Cmd.RampTimeBase := _101_From_PLC_to_HMI_Parameters.PAR_INT[83] ; //[ms]    Excavators - Ramp time base
(*Excavators*)                                 IO.Excavators.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := _101_From_PLC_to_HMI_Parameters.PAR_INT[84] ; //[s]     Excavators - Timeout disable valve
(*Excavators*)                                    IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[85] ; //[%]     Excavators - PVEA Neutral
(*Excavators*)                                        IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Max_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[86] ; //[%]     Excavators - PVEA Max
(*Excavators*)                                        IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Min_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[87] ; //[%]     Excavators - PVEA Min
(*Excavators*)                                              IO.Excavators.Cfg.Hydraulic_Cmd.DeadBand := _101_From_PLC_to_HMI_Parameters.PAR_INT[88] ; //[%]     Excavators - PVEA dead band
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[89] ; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[90] ; //[-]     Spare
(*Excavators*)                                   IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := _101_From_PLC_to_HMI_Parameters.PAR_INT[91] ; //[Hz]    Excavators - PWM command frequency
(*Excavators*)      IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency                        := _101_From_PLC_to_HMI_Parameters.PAR_INT[92] ; //[-]     Excavators - PWM dither frequency
(*Excavators*)                                 IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[93] ; //[-]     Excavators - PWM dither value
(*Excavators*)                                      IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uimA_Min := _101_From_PLC_to_HMI_Parameters.PAR_INT[94] ; //[mA]    Excavators - PWM_I Main minimum current
(*Excavators*)                                      IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uimA_Min := _101_From_PLC_to_HMI_Parameters.PAR_INT[95] ; //[mA]    Excavators - PWM_I Main maximum current
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[96] ; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[97] ; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[98] ; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[99] ; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[100]; //[-]     Spare
(*Excavators*)                                         IO.Excavators.Cfg.Oil_Pressure.Min_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[101]; //[mA]    Excavators - Pressure sensor minimum raw value
(*Excavators*)                                         IO.Excavators.Cfg.Oil_Pressure.Max_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[102]; //[mA]    Excavators - Pressure sensor maximum raw value
(*Excavators*)                                      IO.Excavators.Cfg.Oil_Pressure.Min_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[103]; //[bar]   Excavators - Pressure minimum scaled value
(*Excavators*)                                      IO.Excavators.Cfg.Oil_Pressure.Max_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[104]; //[bar]   Excavators - Pressure maximum scaled value
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[105]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[106]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[107]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[108]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[109]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[110]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[111]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[112]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[113]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[114]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[115]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[116]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[117]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[118]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[119]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[120]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[121]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[122]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[123]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[124]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[125]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[126]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[127]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[128]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[129]; //[-]     Spare
(*Excavators*)                                                                               i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[130]; //[-]     Spare
(*Movement*)                                       IO.Hoist.Cfg.Hydraulic_Cmd.RampAscendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[131]; //[%]     Hoist - Ramp ascending percentage step value
(*Movement*)                                      IO.Hoist.Cfg.Hydraulic_Cmd.RampDescendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[132]; //[%]     Hoist - Ramp descending percentage step value
(*Movement*)                                                 IO.Hoist.Cfg.Hydraulic_Cmd.RampTimeBase := _101_From_PLC_to_HMI_Parameters.PAR_INT[133]; //[ms]    Hoist - Ramp time base
(*Movement*)                                        IO.Hoist.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := _101_From_PLC_to_HMI_Parameters.PAR_INT[134]; //[s]     Hoist - Timeout disable valve
(*Movement*)                                           IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[135]; //[%]     Hoist - PVEA Neutral
(*Movement*)                                               IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Max_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[136]; //[%]     Hoist - PVEA Max
(*Movement*)                                               IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Min_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[137]; //[%]     Hoist - PVEA Min
(*Movement*)                                                     IO.Hoist.Cfg.Hydraulic_Cmd.DeadBand := _101_From_PLC_to_HMI_Parameters.PAR_INT[138]; //[%]     Hoist - PVEA dead band
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[139]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[140]; //[-]     Spare
(*Movement*)                                          IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := _101_From_PLC_to_HMI_Parameters.PAR_INT[141]; //[Hz]    Hoist - PWM command frequency
(*Movement*)                                    IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency := _101_From_PLC_to_HMI_Parameters.PAR_INT[142]; //[-]     Hoist - PWM dither frequency
(*Movement*)                                        IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[143]; //[-]     Hoist - PWM dither value
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[144]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[145]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[146]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[147]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[148]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[149]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[150]; //[-]     Spare
(*Movement*)                                                 IO.Hoist.Cfg.Oil_Pressure.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[151]; //[mA]    Hoist - Pressure sensor minimum raw value
(*Movement*)                                                 IO.Hoist.Cfg.Oil_Pressure.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[152]; //[mA]    Hoist - Pressure sensor maximum raw value
(*Movement*)                                              IO.Hoist.Cfg.Oil_Pressure.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[153]; //[bar]   Hoist - Pressure minimum scaled value
(*Movement*)                                              IO.Hoist.Cfg.Oil_Pressure.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[154]; //[bar]   Hoist - Pressure maximum scaled value
(*Movement*)                                          IO.Pvg_Services.Cfg.Oil_Pressure.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[155]; //[mA]    Service PVG - Pressure sensor minimum raw value
(*Movement*)                                          IO.Pvg_Services.Cfg.Oil_Pressure.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[156]; //[mA]    Service PVG - Pressure sensor maximum raw value
(*Movement*)                                       IO.Pvg_Services.Cfg.Oil_Pressure.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[157]; //[bar]   Service PVG - Pressure minimum scaled value
(*Movement*)                                      IO.Pvg_Services.Cfg.Oil_Pressure.Max_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[158]; //[bar]   Service PVG - Pressure maximum scaled value
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[159]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[160]; //[-]     Spare
(*Movement*)                                                IO.Hoist.Cfg.Encoder_Depth.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[161]; //[mA]    Pump depth - Encoder minimum value
(*Movement*)                                                IO.Hoist.Cfg.Encoder_Depth.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[162]; //[mA]    Pump depth - Encoder maximum value
(*Movement*)                                             IO.Hoist.Cfg.Encoder_Depth.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[163]; //[m]     Pump depth - Depth minimum scaled value
(*Movement*)                                             IO.Hoist.Cfg.Encoder_Depth.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[164]; //[m]     Pump depth - Depth maximum scaled value
(*Movement*)                                                IO.Hoist.Cfg.Depth_Treshold_Inhibit_Navi := _101_From_PLC_to_HMI_Parameters.PAR_INT[165]; //[m]     Pump depth - Max depth preventing navi mode switching
(*Movement*)                                                 IO.Hoist.Cfg.Value_Interval_For_Average := _101_From_PLC_to_HMI_Parameters.PAR_INT[166]; //[100ms] Pump depth - Interval for picking value and calculate average
(*Movement*)                                                       IO.Hoist.Cfg.Max_Cable_Meters_x10 := _101_From_PLC_to_HMI_Parameters.PAR_INT[167]; //[dm]    Pump depth - Max lenght hoist cable meters x 10
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[168]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[169]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[170]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[171]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[172]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[173]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[174]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[175]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[176]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[177]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[178]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[179]; //[-]     Spare
(*Movement*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[180]; //[-]     Spare
(*Propeller*)                                  IO.Propeller.Cfg.Hydraulic_Cmd.RampAscendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[181]; //[%]     Propeller - Ramp ascending percentage step value
(*Propeller*)                                 IO.Propeller.Cfg.Hydraulic_Cmd.RampDescendingPercValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[182]; //[%]     Propeller - Ramp descending percentage step value
(*Propeller*)                                            IO.Propeller.Cfg.Hydraulic_Cmd.RampTimeBase := _101_From_PLC_to_HMI_Parameters.PAR_INT[183]; //[ms]    Propeller - Ramp time base
(*Propeller*)                                   IO.Propeller.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := _101_From_PLC_to_HMI_Parameters.PAR_INT[184]; //[s]     Propeller - Timeout disable valve
(*Propeller*)                                      IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[185]; //[%]     Propeller - PVEA Neutral
(*Propeller*)                                          IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Max_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[186]; //[%]     Propeller - PVEA Max
(*Propeller*)                                          IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Min_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[187]; //[%]     Propeller - PVEA Min
(*Propeller*)                                                IO.Propeller.Cfg.Hydraulic_Cmd.DeadBand := _101_From_PLC_to_HMI_Parameters.PAR_INT[188]; //[%]     Propeller - PVEA dead band
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[189]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[190]; //[-]     Spare
(*Propeller*)                                     IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := _101_From_PLC_to_HMI_Parameters.PAR_INT[191]; //[Hz]    Propeller - PWM command frequency
(*Propeller*)                               IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency := _101_From_PLC_to_HMI_Parameters.PAR_INT[192]; //[-]     Propeller - PWM dither frequency
(*Propeller*)                                   IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[193]; //[-]     Propeller - PWM dither value
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[194]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[195]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[196]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[197]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[198]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[199]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[200]; //[-]     Spare
(*Propeller*)                                            IO.Propeller.Cfg.Oil_Pressure.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[201]; //[mA]    Propeller - Pressure sensor minimum raw value
(*Propeller*)                                            IO.Propeller.Cfg.Oil_Pressure.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[202]; //[mA]    Propeller - Pressure sensor maximum raw value
(*Propeller*)                                         IO.Propeller.Cfg.Oil_Pressure.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[203]; //[bar]   Propeller - Pressure minimum scaled value
(*Propeller*)                                         IO.Propeller.Cfg.Oil_Pressure.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[204]; //[bar]   Propeller - Pressure maximum scaled value
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[205]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[206]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[207]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[208]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[209]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[210]; //[-]     Spare
(*Propeller*)                                         IO.Propeller.Cfg.Joystick.Threshold_UpDown_Cmd := _101_From_PLC_to_HMI_Parameters.PAR_INT[211]; //[%]     Propeller - Threshold to reach to activate the propeller up and down
(*Propeller*)                                             IO.Propeller.Cfg.Joystick.Threshold_LR_Cmd := _101_From_PLC_to_HMI_Parameters.PAR_INT[212]; //[%]     Propeller - Threshold to reach to activate the propeller left or right
(*Propeller*)                                           IO.Propeller.Cfg.Joystick.Threshold_FwBw_Cmd := _101_From_PLC_to_HMI_Parameters.PAR_INT[213]; //[%]     Propeller - Threshold to reach to activate the propeller forward and backward
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[214]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[215]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[216]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[217]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[218]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[219]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[220]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[221]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[222]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[223]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[224]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[225]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[226]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[227]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[228]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[229]; //[-]     Spare
(*Propeller*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[230]; //[-]     Spare
(*Oil tank*)                                                            IO.Oil.Cfg.Limits.Start_Fans := _101_From_PLC_to_HMI_Parameters.PAR_INT[231]; //[°C]    Oil temperature - Start cooling fans threshold
(*Oil tank*)                                                             IO.Oil.Cfg.Limits.Stop_Fans := _101_From_PLC_to_HMI_Parameters.PAR_INT[232]; //[°C]    Oil temperature - Stop cooling fans threshold
(*Oil tank*)                                                           IO.Oil.Cfg.Limits.Alarm_Limit := _101_From_PLC_to_HMI_Parameters.PAR_INT[233]; //[°C]    Oil temperature - Max temperature allowed - STOP ENGINE
(*Oil tank*)                                                         IO.Oil.Cfg.Limits.Warning_Limit := _101_From_PLC_to_HMI_Parameters.PAR_INT[234]; //[°C]    Oil temperature - Warning oil temperature threshold
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[235]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[236]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[237]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[238]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[239]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[240]; //[-]     Spare
(*Oil tank*)                                                    IO.Oil.Cfg.Temp_Analog.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[241]; //[mA]    Oil temperature - Sensor minimum value
(*Oil tank*)                                                    IO.Oil.Cfg.Temp_Analog.Max_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[242]; //[mA]    Oil temperature - Sensor maximum value
(*Oil tank*)                                                 IO.Oil.Cfg.Temp_Analog.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[243]; //[°C]    Oil temperature - minimum scaled value
(*Oil tank*)                                                 IO.Oil.Cfg.Temp_Analog.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[244]; //[°C]    Oil temperature - maximum scaled value
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[245]; //[-]     Spare
(*Oil tank*)                                                   IO.Oil.Cfg.Level_Analog.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[246]; //[mA]    Oil level - Sensor minimum value
(*Oil tank*)                                                  IO.Oil.Cfg.Level_Analog.Max_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[247]; //[mA]    Oil level - Sensor maximum value
(*Oil tank*)                                               IO.Oil.Cfg.Level_Analog.Min_Scaled_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[248]; //[%]     Oil level - minimum scaled value
(*Oil tank*)                                                IO.Oil.Cfg.Level_Analog.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[249]; //[%]     Oil level - maximum scaled value
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[250]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[251]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[252]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[253]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[254]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[255]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[256]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[257]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[258]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[259]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[260]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[261]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[262]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[263]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[264]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[265]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[266]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[267]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[268]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[269]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[270]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[271]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[272]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[273]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[274]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[275]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[276]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[277]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[278]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[279]; //[-]     Spare
(*Oil tank*)                                                                                 i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[280]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[281]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[282]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[283]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[284]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[285]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[286]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[287]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[288]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[289]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[290]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[291]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[292]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[293]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[294]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[295]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[296]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[297]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[298]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[299]; //[-]     Spare
(*Network*)                                                                                  i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[300]; //[-]     Spare
(*Engine*)                                                     IO.Engine.Cfg.Engine_ON_Rpm_Threshold := _101_From_PLC_to_HMI_Parameters.PAR_INT[301]; //[rpm]   Engine ON Rpm threshold
(*Engine*)                                                        IO.Engine.Cfg.Engine_Min_Speed_rpm := _101_From_PLC_to_HMI_Parameters.PAR_INT[302]; //[rpm]   Engine minimum speed
(*Engine*)                                                        IO.Engine.Cfg.Engine_Max_Speed_rpm := _101_From_PLC_to_HMI_Parameters.PAR_INT[303]; //[rpm]   Engine maximum speed
(*Engine*)                                                         IO.Engine.Cfg.Speed_Decrement_rpm := _101_From_PLC_to_HMI_Parameters.PAR_INT[304]; //[rpm]   Speed decrement step value
(*Engine*)                                                         IO.Engine.Cfg.Speed_Increment_rpm := _101_From_PLC_to_HMI_Parameters.PAR_INT[305]; //[rpm]   Speed increment step value
(*Engine*)                                                        IO.Engine.Cfg.Engine_Standby_Speed := _101_From_PLC_to_HMI_Parameters.PAR_INT[306]; //[rpm]   Engine standby speed
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[307]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[308]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[309]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[310]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[311]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[312]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[313]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[314]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[315]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[316]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[317]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[318]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[319]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[320]; //[-]     Spare
(*Engine*)                                                 IO.Engine.Cfg.Engine_Comm_Breakdown_Delay := _101_From_PLC_to_HMI_Parameters.PAR_INT[321]; //[ms]    Engine communication breakdown delay
(*Engine*)                                                           IO.Engine.Cfg.Stop_Button_Delay := _101_From_PLC_to_HMI_Parameters.PAR_INT[322]; //[ms]    Stop button delay
(*Engine*)                                                               IO.Engine.Cfg.Warm_Up_Delay := _101_From_PLC_to_HMI_Parameters.PAR_INT[323]; //[ms]    Warm up delay
(*Engine*)                                                               IO.Engine.Cfg.Start_Timeout := _101_From_PLC_to_HMI_Parameters.PAR_INT[324]; //[ms]    Start command timeout
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[325]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[326]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[327]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[328]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[329]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[330]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[331]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[332]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[333]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[334]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[335]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[336]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[337]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[338]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[339]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[340]; //[-]     Spare
(*Engine*)                                                   IO.Signal_Lamp.Cfg.i_batteryBreakerTime := _101_From_PLC_to_HMI_Parameters.PAR_INT[341]; //[sec]   Delay shut down battery braker stage V engine
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[342]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[343]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[344]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[345]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[346]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[347]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[348]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[349]; //[-]     Spare
(*Engine*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[350]; //[-]     Spare
(*Events*)                                             IO.Event.Cfg.i_DigitalSensorAlarm_timeFilter  := _101_From_PLC_to_HMI_Parameters.PAR_INT[351]; //[ms]    DigitalSensorAlarm_timeFilter
(*Events*)                                           IO.Event.Cfg.i_DigitalSensorWarning_timeFilter  := _101_From_PLC_to_HMI_Parameters.PAR_INT[352]; //[ms]    DigitalSensorWarning_timeFilter
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[353]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[354]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[355]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[356]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[357]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[358]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[359]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[360]; //[-]     Spare
(*Events*)                                            IO.Event.Cfg.Minutes_Before_Alarm_Stops_Engine := _101_From_PLC_to_HMI_Parameters.PAR_INT[361]; //[min]   Delay before the active alarms stops the engine
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[362]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[363]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[364]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[365]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[366]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[367]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[368]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[369]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[370]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[371]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[372]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[373]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[374]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[375]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[376]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[377]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[378]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[379]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[380]; //[-]     Spare
(*Events*)                                               IO.Physical_IO.Cfg.min4_20_sensorErrorValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[381]; //[mA]    Minimum threshold before error for 4-20 mA sensors
(*Events*)                                               IO.Physical_IO.Cfg.max4_20_sensorErrorValue := _101_From_PLC_to_HMI_Parameters.PAR_INT[382]; //[mA]    Maximum threshold before error for 4-20 mA sensors
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[383]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[384]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[385]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[386]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[387]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[388]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[389]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[390]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[391]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[392]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[393]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[394]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[395]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[396]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[397]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[398]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[399]; //[-]     Spare
(*Events*)                                                                                   i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[400]; //[-]     Spare
(*Internal signal*)                               IO.internal_Signal.Cfg.Password.Delay_Pass_Expire  := _101_From_PLC_to_HMI_Parameters.PAR_INT[401]; //[sec]   Delay password expires
(*Internal signal*)                                        IO.internal_Signal.Cfg.Password.Level[0]  := _101_From_PLC_to_HMI_Parameters.PAR_INT[402]; //[-]     Password Level 0
(*Internal signal*)                                        IO.internal_Signal.Cfg.Password.Level[1]  := _101_From_PLC_to_HMI_Parameters.PAR_INT[403]; //[-]     Password Level 1
(*Internal signal*)                                        IO.internal_Signal.Cfg.Password.Level[2]  := _101_From_PLC_to_HMI_Parameters.PAR_INT[404]; //[-]     Password Level 2
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[405]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[406]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[407]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[408]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[409]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[410]; //[-]     Spare
(*Internal signal*)                              IO.System.Cfg.Power_Manage.Timeout_Shutdown_Off_Sec := _101_From_PLC_to_HMI_Parameters.PAR_INT[411]; //[sec]   PLC timeout shutdown seconds delay
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[412]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[413]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[414]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[415]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[416]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[417]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[418]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[419]; //[-]     Spare
(*Internal signal*)                                                                          i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[420]; //[-]     Spare
(*Fuel tank*)                                          IO.Fuel_Tank.Cfg.Level_Sensor_1.Min_Raw_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[421]; //[Ohm]   Fuel level - Sensor minimum raw value
(*Fuel tank*)                                         IO.Fuel_Tank.Cfg.Level_Sensor_1.Max_Raw_Value  := _101_From_PLC_to_HMI_Parameters.PAR_INT[422]; //[Ohm]   Fuel level - Sensor maximum raw value
(*Fuel tank*)                                       IO.Fuel_Tank.Cfg.Level_Sensor_1.Min_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[423]; //[%]     Fuel level - Minimum scaled value
(*Fuel tank*)                                       IO.Fuel_Tank.Cfg.Level_Sensor_1.Max_Scaled_Value := _101_From_PLC_to_HMI_Parameters.PAR_INT[424]; //[%]     Fuel level - Maximum scaled value
(*Fuel tank*)                                                IO.Fuel_Tank.Cfg.Reserve_Threshold_Perc := _101_From_PLC_to_HMI_Parameters.PAR_INT[425]; //[%]     Fuel level - Reserve threshold
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[426]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[427]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[428]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[429]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[430]; //[-]     Spare
(*Fuel tank*)                                                  IO.Fuel_Tank.Cfg.Timer_To_Change_Tank := _101_From_PLC_to_HMI_Parameters.PAR_INT[431]; //[sec]   Fuel tanks - timer to change tank
(*Fuel tank*)                                                      IO.Fuel_Tank.Cfg.Max_Diff_Allowed := _101_From_PLC_to_HMI_Parameters.PAR_INT[432]; //[%]     Fuel tanks - max difference allowed between tanks
(*Fuel tank*)                                              IO.Fuel_Tank.Cfg.Delay_Both_Tanks_Working := _101_From_PLC_to_HMI_Parameters.PAR_INT[433]; //[sec]   Fuel tanks - delay when switching. Keeps both tank connected
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[434]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[435]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[436]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[437]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[438]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[439]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[440]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[441]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[442]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[443]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[444]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[445]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[446]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[447]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[448]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[449]; //[-]     Spare
(*Fuel tank*)                                                                                i_Spare := _101_From_PLC_to_HMI_Parameters.PAR_INT[450]; //[-]     Spare

////////////////////////////////////////////////////////////
// STS BOOL
////////////////////////////////////////////////////////////

(*Statistics*)                            IO.Pump_Dredge.Sts.Maintenance_Required := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[0]  ; // Maintenance required on dredging pump
(*Statistics*)                             IO.Excavators.Sts.Maintenance_Required := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[1]  ; // Maintenance required on excavators
(*Statistics*)                                 IO.Engine.Sts.Maintenance_Required := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[2]  ; // Maintenance required on engine
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[3]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[4]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[5]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[6]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[7]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[8]  ; // 
(*Statistics*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[9]  ; // 
(*Hydraulic*)                                              IO.Oil.Sts.Filter_1_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[10] ; // Oil filter 1 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_2_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[11] ; // Oil filter 2 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_3_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[12] ; // Oil filter 3 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_4_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[13] ; // Oil filter 4 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_5_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[14] ; // Oil filter 5 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_6_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[15] ; // Oil filter 6 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_7_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[16] ; // Oil filter 7 ok - 0=not ok , 1=ok
(*Hydraulic*)                                              IO.Oil.Sts.Filter_8_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[17] ; // Oil filter 8 ok - 0=not ok , 1=ok
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[18] ; // 
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[19] ; // 
(*Hydraulic*)                                    IO.Oil.Sts.Oil_Lvl_Above_Warning := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[20] ; // Oil level is above the warning level
(*Hydraulic*)                                      IO.Oil.Sts.Oil_Lvl_Above_Alarm := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[21] ; // Oil level is above the alarm level
(*Hydraulic*)                                   IO.Oil.Sts.Oil_Temp_Below_Warning := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[22] ; // Oil temperature is below the warning level
(*Hydraulic*)                                     IO.Oil.Sts.Oil_Temp_Below_Alarm := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[23] ; // Oil temperature is below the alarm level
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[24] ; // 
(*Hydraulic*)                                    IO.Oil.Sts.Oil_Lvl_Reading_Error := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[25] ; // Oil level sensors are providing inconsistent readings
(*Hydraulic*)                                   IO.Oil.Sts.Oil_Temp_Reading_Error := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[26] ; // Oil temp sensors are providing inconsistent readings
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[27] ; // 
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[28] ; // 
(*Hydraulic*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[29] ; // 
(*Dredging pump*)                                      IO.Pump_Dredge.Sts.Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[30] ; // Dredging pump is running
(*Dredging pump*)      IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[31] ; // Pressure sensor error
(*Dredging pump*) IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[32] ; // Pressure sensor error
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[33] ; // 
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[34] ; // 
(*Dredging pump*)                            IO.Pump_Dredge.Sts.Hydraulic_Cmd_Err := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[35] ; // Dredging pump command is in error (could be pump or valve)
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[36] ; // 
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[37] ; // 
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[38] ; // 
(*Dredging pump*)                                                         x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[39] ; // 
(*Excavators*)                                          IO.Excavators.Sts.Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[40] ; // Excavators are running
(*Excavators*)                                          IO.Excavators.Sts.Stopped := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[41] ; // Excavators are stopped
(*Excavators*)                                     IO.Excavators.Sts.Work_Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[42] ; // Excavators are running in work direction
(*Excavators*)                                  IO.Excavators.Sts.Reverse_Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[43] ; // Excavators are running in reverse direction
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[44] ; // 
(*Excavators*)                                      IO.Excavators.Sts.Valve_Error := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[45] ; // Excavator valve is in error state
(*Excavators*)          IO.Excavators.Sts.Oil_Pressure.Main_Circuit.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[46] ; // Pressure sensor error
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[47] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[48] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[49] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[50] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[51] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[52] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[53] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[54] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[55] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[56] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[57] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[58] ; // 
(*Excavators*)                                                            x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[59] ; // 
(*Propeller*)                                                 IO.Propeller.Cmd.Up := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[60] ; // 
(*Propeller*)                                               IO.Propeller.Cmd.Down := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[61] ; // 
(*Propeller*)                                               IO.Propeller.Cmd.Left := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[62] ; // 
(*Propeller*)                                              IO.Propeller.Cmd.Right := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[63] ; // 
(*Propeller*)                                            IO.Propeller.Cmd.Forward := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[64] ; // 
(*Propeller*)                                           IO.Propeller.Cmd.Backward := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[65] ; // 
(*Propeller*)                            IO.Propeller.Cmd.Joystick_Human_Presence := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[66] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[67] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[68] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[69] ; // 
(*Propeller*)                              IO.Propeller.Sts.Hydraulic_Valve_Error := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[70] ; // 
(*Propeller*)            IO.Propeller.Sts.Oil_Pressure.Main_Circuit.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[71] ; // Pressure sensor error
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[72] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[73] ; // 
(*Propeller*)                            IO.Propeller.Cmd.Joystick_Human_Presence := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[74] ; // The enable button is pressed properly to use the propeller
(*Propeller*)                                            IO.Propeller.Sts.Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[75] ; // The propeller is running fw/bw
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[76] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[77] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[78] ; // 
(*Propeller*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[79] ; // 
(*Hoist*)                                                       IO.Hoist.Cmd.Wind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[80] ; // 
(*Hoist*)                                                     IO.Hoist.Cmd.Unwind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[81] ; // 
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[82] ; // 
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[83] ; // 
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[84] ; // 
(*Hoist*)                                   IO.Hoist.Sts.Pump_Depth.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[85] ; // Encoder depth error
(*Hoist*)                    IO.Hoist.Sts.Oil_Pressure.Main_Circuit.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[86] ; // Pressure sensor error
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[87] ; // 
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[88] ; // 
(*Hoist*)                                                                 x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[89] ; // 
(*Winches*)                                                IO.Winches.Cmd.FL_Wind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[90] ; // The operator is commanding  the winches
(*Winches*)                                              IO.Winches.Cmd.FL_Unwind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[91] ; // The operator is commanding  the winches
(*Winches*)                                                IO.Winches.Cmd.RL_Wind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[92] ; // The operator is commanding  the winches
(*Winches*)                                              IO.Winches.Cmd.RL_Unwind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[93] ; // The operator is commanding  the winches
(*Winches*)                                                IO.Winches.Cmd.FR_Wind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[94] ; // The operator is commanding  the winches
(*Winches*)                                              IO.Winches.Cmd.FR_Unwind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[95] ; // The operator is commanding  the winches
(*Winches*)                                                IO.Winches.Cmd.RR_Wind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[96] ; // The operator is commanding  the winches
(*Winches*)                                              IO.Winches.Cmd.RR_Unwind := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[97] ; // The operator is commanding  the winches
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[98] ; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[99] ; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[100]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[101]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[102]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[103]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[104]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[105]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[106]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[107]; // 
(*Winches*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[108]; // 
(*Winches*)                        IO.Pvg_Services.Sts.Oil_Pressure.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[109]; // Pressure sensor error
(*Fuel Tank*)                         IO.Fuel_Tank.Sts.Fuel_Level_1.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[110]; // Anomaly on fuel tank level sensor
(*Fuel Tank*)                         IO.Fuel_Tank.Sts.Fuel_Level_2.xError_Sensor := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[111]; // Anomaly on fual tenk level sensor
(*Fuel Tank*)                                   IO.Fuel_Tank.Sts.Tank_1_Level_Low := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[112]; // Fuel tank 1 below threshold
(*Fuel Tank*)                                   IO.Fuel_Tank.Sts.Tank_2_Level_Low := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[113]; // Fuel tank 2 below threshold
(*Fuel Tank*)                                 IO.Fuel_Tank.Sts.Tank_1_Level_Empty := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[114]; // Fuel tank 1 empty
(*Fuel Tank*)                                 IO.Fuel_Tank.Sts.Tank_2_Level_Empty := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[115]; // Fuel tank 2 empty
(*Fuel Tank*)                                          IO.Fuel_Tank.Cmd.Left_Tank := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[116]; // Left tank in use
(*Fuel Tank*)                                         IO.Fuel_Tank.Cmd.Right_Tank := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[117]; // Right tank in use
(*Fuel Tank*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[118]; // 
(*Fuel Tank*)                                                             x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[119]; // 
(*Mach Status*)                    IO.Internal_Signal.Sts.All_Parameters_Received := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[120]; // All parameters written properly after a restore
(*Mach Status*)                IO.Internal_Signal.Sts.Error_Writing_All_Parameter := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[121]; // Error during writing all parameters
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[122]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[123]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[124]; // 
(*Mach Status*)                                    IO.System.Sts.PLC_ShuttingDown := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[125]; // PLC is shutting down
(*Mach Status*)                                      IO.System.Cmd.Switch_Off_HMI := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[126]; // Command HMI shutdown
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[127]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[128]; // 
(*Mach Status*)                    IO.MachineMode.Sts.Inhibit_Change_Mode_To_Navi := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[129]; // The navi mode switching is inhibited by some conditions
(*Mach Status*)                    IO.MachineMode.Sts.Inhibit_Change_Mode_To_Work := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[130]; // The work mode switching is inhibited by some conditions
(*Mach Status*)                        IO.MachineMode.Sts.Inhibit_Navi_Show_Popup := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[131]; // Show popup navi mode is inhibited
(*Mach Status*)                        IO.MachineMode.Sts.Inhibit_Work_Show_Popup := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[132]; // Show popup work mode is inhibited
(*Mach Status*)                        IO.MachineMode.Sts.Press_Enable_Show_Popup := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[133]; // Show popup enable is not pressed correctly
(*Mach Status*)                 IO.MachineMode.Sts.NotPossible_In_Work_Show_Popup := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[134]; // Operation not possible in work mode
(*Mach Status*)                 IO.MachineMode.Sts.NotPossible_In_Navi_Show_Popup := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[135]; // Operation not possible in navi mode
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[136]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[137]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[138]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[139]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[140]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[141]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[142]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[143]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[144]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[145]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[146]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[147]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[148]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[149]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[150]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[151]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[152]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[153]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[154]; // 
(*Mach Status*)                                      IO.Event.Sts.Warning_Present := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[155]; // At least one warning is active in the machine
(*Mach Status*)                                        IO.Event.Sts.Alarm_Present := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[156]; // At least one alarm is active in the machine
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[157]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[158]; // 
(*Mach Status*)                                                           x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[159]; // 
(*Network*)           IO.Network.CAN.Sts.DeviceStatus._05_CR2016_CP_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[160]; // 
(*Network*)           IO.Network.CAN.Sts.DeviceStatus._06_CR2016_OC_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[161]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[162]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[163]; // 
(*Network*)          IO.Network.CAN.Sts.DeviceStatus._15_CR2050_HYD_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[164]; // 
(*Network*)              IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[165]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[166]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[167]; // 
(*Network*)              IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[168]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[169]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[170]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[171]; // 
(*Network*)                  IO.Network.CAN.Sts.DeviceStatus.Engine_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[172]; // 
(*Network*)                IO.Network.CAN.Sts.DeviceStatus.Joystick_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[173]; // 
(*Network*)            IO.Network.CAN.Sts.DeviceStatus.Inclinometer_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[174]; // 
(*Network*)       IO.Network.CAN.Sts.DeviceStatus.Propeller_Encoder_Connection_Ok := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[175]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[176]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[177]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[178]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[179]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[180]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[181]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[182]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[183]; // 
(*Network*)                               IO.Network.CAN.Sts.Ch_Status[0].xActive := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[184]; // Can diagnostic Channel 0
(*Network*)                                IO.Network.CAN.Sts.Ch_Status[0].xError := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[185]; // Can diagnostic Channel 0
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[0].xWarningRx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[186]; // Can diagnostic Channel 0
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[0].xWarningTx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[187]; // Can diagnostic Channel 0
(*Network*)                               IO.Network.CAN.Sts.Ch_Status[1].xActive := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[188]; // Can diagnostic Channel 1
(*Network*)                                IO.Network.CAN.Sts.Ch_Status[1].xError := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[189]; // Can diagnostic Channel 1
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[1].xWarningRx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[190]; // Can diagnostic Channel 1
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[1].xWarningTx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[191]; // Can diagnostic Channel 1
(*Network*)                               IO.Network.CAN.Sts.Ch_Status[2].xActive := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[192]; // Can diagnostic Channel 2
(*Network*)                                IO.Network.CAN.Sts.Ch_Status[2].xError := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[193]; // Can diagnostic Channel 2
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[2].xWarningRx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[194]; // Can diagnostic Channel 2
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[2].xWarningTx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[195]; // Can diagnostic Channel 2
(*Network*)                               IO.Network.CAN.Sts.Ch_Status[3].xActive := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[196]; // Can diagnostic Channel 3
(*Network*)                                IO.Network.CAN.Sts.Ch_Status[3].xError := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[197]; // Can diagnostic Channel 3
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[3].xWarningRx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[198]; // Can diagnostic Channel 3
(*Network*)                            IO.Network.CAN.Sts.Ch_Status[3].xWarningTx := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[199]; // Can diagnostic Channel 3
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[200]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[201]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[202]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[203]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[204]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[205]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[206]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[207]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[208]; // 
(*Network*)                                                               x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[209]; // 
(*Engine*)                                                  IO.Engine.Sts.Running := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[210]; // 
(*Engine*)                                                  IO.Engine.Sts.Warning := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[211]; // 
(*Engine*)                                                    IO.Engine.Sts.Alarm := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[212]; // 
(*Engine*)                                         IO.Engine.Sts.Low_Oil_Pressure := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[213]; // 
(*Engine*)                                          IO.Engine.Sts.Derating_Active := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[214]; // 
(*Engine*)                                            IO.Engine.Sts.Regen.Request := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[215]; // 
(*Engine*)                                            IO.Engine.Sts.Regen.Inhibit := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[216]; // 
(*Engine*)                                             IO.Engine.Sts.Regen.Active := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[217]; // 
(*Engine*)                                        IO.Engine.Sts.Regen.Temperature := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[218]; // 
(*Engine*)                                              IO.Engine.Sts.Regen.Error := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[219]; // 
(*Engine*)                                   IO.Engine.Sts.WaitBeforeCuttingPower := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[220]; // Wait to shutdown PLC untile hte stage V purge is complete
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[221]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[222]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[223]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[224]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[225]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[226]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[227]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[228]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[229]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[230]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[231]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[232]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[233]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[234]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[235]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[236]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[237]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[238]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[239]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[240]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[241]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[242]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[243]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[244]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[245]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[246]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[247]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[248]; // 
(*Engine*)                                                                x_Spare := _102_From_PLC_to_HMI_MachStatus.STS_BOOL[249]; // 

////////////////////////////////////////////////////////////
// STS INT
////////////////////////////////////////////////////////////

(*Statistics*)                    IO.Statistics.Sts.Dredging_Pump_Service_Hours := _102_From_PLC_to_HMI_MachStatus.STS_INT[0]  ; //[h]     Dredging pump working hours since last maintenance
(*Statistics*)                       IO.Statistics.Sts.Excavators_Service_Hours := _102_From_PLC_to_HMI_MachStatus.STS_INT[1]  ; //[h]     Excavator working hours since last maintenance
(*Statistics*)                           IO.Statistics.Sts.Engine_Service_Hours := _102_From_PLC_to_HMI_MachStatus.STS_INT[2]  ; //[h]     Engine running hours since last maintenance
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[3]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[4]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[5]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[6]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[7]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[8]  ; //[-]     
(*Statistics*)                                                          i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[9]  ; //[-]     
(*Hydraulic*)                      IO.Pump_Dredge.Sts.Setpoint_Perc_Ramped_Main := _102_From_PLC_to_HMI_MachStatus.STS_INT[10] ; //[%]     Dredging pump speed command
(*Hydraulic*)           IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[11] ; //[bar]   Dredging pump oil pressure main circuit
(*Hydraulic*)      IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[12] ; //[bar]   Dredging pump oil pressure secondary circuit
(*Hydraulic*)                            IO.Pump_Dredge.Sts.Oil_Flow.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[13] ; //[l/min] Dredging pump oil flow
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[14] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[15] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[16] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[17] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[18] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[19] ; //[-]     
(*Hydraulic*)                             IO.Excavators.Sts.Setpoint_Percentage := _102_From_PLC_to_HMI_MachStatus.STS_INT[20] ; //[%]     Excavators speed command
(*Hydraulic*)            IO.Excavators.Sts.Oil_Pressure.Main_Circuit.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[21] ; //[bar]   Excavators oil pressure main circuit
(*Hydraulic*)                 IO.Excavators.Sts.Oil_Pressure.Booster.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[22] ; //[bar]   Excavators oil pressure booster
(*Hydraulic*)                             IO.Excavators.Sts.Oil_Flow.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[23] ; //[l/min] Excavators oil flow
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[24] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[25] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[26] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[27] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[28] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[29] ; //[-]     
(*Hydraulic*)                        IO.Propeller.Sts.Setpoint_Perc_Ramped_Main := _102_From_PLC_to_HMI_MachStatus.STS_INT[30] ; //[%]     Propeller speed command
(*Hydraulic*)             IO.Propeller.Sts.Oil_Pressure.Main_Circuit.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[31] ; //[bar]   Propeller oil pressure
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[32] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[33] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[34] ; //[-]     
(*Hydraulic*)                 IO.Hoist.Sts.Oil_Pressure.Main_Circuit.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[35] ; //[bar]   Hoist oil pressure
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[36] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[37] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[38] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[39] ; //[-]     
(*Hydraulic*)                       IO.Pvg_Services.Sts.Oil_Pressure.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[40] ; //[bar]   Service PVG oil pressure
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[41] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[42] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[43] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[44] ; //[-]     
(*Hydraulic*)                                   IO.Oil.Sts.Oil_Level.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[45] ; //[%]     Oil tank level
(*Hydraulic*)                                    IO.Oil.Sts.Oil_Temp.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[46] ; //[°C]    Oil tank temperature
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[47] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[48] ; //[-]     
(*Hydraulic*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[49] ; //[-]     
(*Slurry*)                                     IO.Slurry.Sts.Density.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[50] ; //[g/l]   Density of slurry
(*Slurry*)                                        IO.Slurry.Sts.Flow.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[51] ; //[m3/h]  Flow of slurry
(*Slurry*)                                             IO.Slurry.Sts.Production := _102_From_PLC_to_HMI_MachStatus.STS_INT[52] ; //[Kg/h]  Actual production
(*Slurry*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[53] ; //[-]     
(*Slurry*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[54] ; //[-]     
(*Machine status*)                                IO.System.Sts.Battery_Voltage := _102_From_PLC_to_HMI_MachStatus.STS_INT[55] ; //[V]     Battery voltage
(*Machine status*)                         IO.Internal_Signal.Sts.MachineStatus := _102_From_PLC_to_HMI_MachStatus.STS_INT[56] ; //[-]     Machine status
(*Machine status*)                           IO.Internal_Signal.Sts.WorkingMode := _102_From_PLC_to_HMI_MachStatus.STS_INT[57] ; //[-]     Working mode (1=Navigation,2=Dredging)
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[58] ; //[-]     
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[59] ; //[-]     
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[60] ; //[-]     
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[61] ; //[-]     
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[62] ; //[-]     
(*Machine status*)                                                      i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[63] ; //[-]     
(*Machine status*)                                   IO.System.Sts.INT_From_PLC := _102_From_PLC_to_HMI_MachStatus.STS_INT[64] ; //[-]     Incremental INT to test the communication
(*Engine*)                                                    IO.Engine.Sts.Rpm := _102_From_PLC_to_HMI_MachStatus.STS_INT[65] ; //[rpm]   
(*Engine*)                                                 IO.Engine.Sts.Torque := _102_From_PLC_to_HMI_MachStatus.STS_INT[66] ; //[%]     
(*Engine*)                             IO.Fuel_Tank.Sts.Fuel_Level_1.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[67] ; //[%]     
(*Engine*)                             IO.Fuel_Tank.Sts.Fuel_Level_2.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[68] ; //[%]     
(*Engine*)                                       IO.Engine.Sts.Fuel_Consumption := _102_From_PLC_to_HMI_MachStatus.STS_INT[69] ; //[l/h]   
(*Engine*)                                           IO.Engine.Sts.Oil_Pressure := _102_From_PLC_to_HMI_MachStatus.STS_INT[70] ; //[kpa]   
(*Engine*)                                             IO.Engine.Sts.Water_Temp := _102_From_PLC_to_HMI_MachStatus.STS_INT[71] ; //[°C]    
(*Engine*)                                          IO.Engine.Sts.IntakeAirTemp := _102_From_PLC_to_HMI_MachStatus.STS_INT[72] ; //[°C]    
(*Engine*)                                                   IO.Engine.Sts.Load := _102_From_PLC_to_HMI_MachStatus.STS_INT[73] ; //[%]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[74] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[75] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[76] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[77] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[78] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[79] ; //[-]     
(*Engine*)                                             IO.Engine.Sts.Urea_Level := _102_From_PLC_to_HMI_MachStatus.STS_INT[80] ; //[%]     
(*Engine*)                                              IO.Engine.Sts.Urea_Temp := _102_From_PLC_to_HMI_MachStatus.STS_INT[81] ; //[°C]    
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[82] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[83] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[84] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[85] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[86] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[87] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[88] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[89] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[90] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[91] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[92] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[93] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[94] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[95] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[96] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[97] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[98] ; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[99] ; //[-]     
(*Engine*)                               IO.Engine.Sts.Percentage_Shutting_Down := _102_From_PLC_to_HMI_MachStatus.STS_INT[100]; //[%]     Percentage left until power can be cut from the motor
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[101]; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[102]; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[103]; //[-]     
(*Engine*)                                                              i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[104]; //[-]     
(*Propeller*)                         IO.Propeller.Sts.Joystick.Joystick_Axis_X := _102_From_PLC_to_HMI_MachStatus.STS_INT[105]; //[-]     
(*Propeller*)                         IO.Propeller.Sts.Joystick.Joystick_Axis_Y := _102_From_PLC_to_HMI_MachStatus.STS_INT[106]; //[-]     
(*Propeller*)                               IO.Propeller.Sts.Encoder.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[107]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[108]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[109]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[110]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[111]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[112]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[113]; //[-]     
(*Propeller*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[114]; //[-]     
(*Movements*)                                IO.Hoist.Sts.Pump_Depth.iValue_x10 := _102_From_PLC_to_HMI_MachStatus.STS_INT[115]; //[dm]    Pump depth
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[116]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[117]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[118]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[119]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[120]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[121]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[122]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[123]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[124]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[125]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[126]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[127]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[128]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[129]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[130]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[131]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[132]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[133]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[134]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[135]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[136]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[137]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[138]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[139]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[140]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[141]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[142]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[143]; //[-]     
(*Movements*)                                                           i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[144]; //[-]     
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[0].iErrorCntRx := _102_From_PLC_to_HMI_MachStatus.STS_INT[145]; //[-]     Can diagnostic Channel 0
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[0].iErrorCntTx := _102_From_PLC_to_HMI_MachStatus.STS_INT[146]; //[-]     Can diagnostic Channel 0
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[0].DiagInfo := _102_From_PLC_to_HMI_MachStatus.STS_INT[147]; //[-]     Can diagnostic Channel 0
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[0].iBusLoad := _102_From_PLC_to_HMI_MachStatus.STS_INT[148]; //[-]     Can diagnostic Channel 0
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[1].iErrorCntRx := _102_From_PLC_to_HMI_MachStatus.STS_INT[149]; //[-]     Can diagnostic Channel 1
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[1].iErrorCntTx := _102_From_PLC_to_HMI_MachStatus.STS_INT[150]; //[-]     Can diagnostic Channel 1
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[1].DiagInfo := _102_From_PLC_to_HMI_MachStatus.STS_INT[151]; //[-]     Can diagnostic Channel 1
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[1].iBusLoad := _102_From_PLC_to_HMI_MachStatus.STS_INT[152]; //[-]     Can diagnostic Channel 1
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[2].iErrorCntRx := _102_From_PLC_to_HMI_MachStatus.STS_INT[153]; //[-]     Can diagnostic Channel 2
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[2].iErrorCntTx := _102_From_PLC_to_HMI_MachStatus.STS_INT[154]; //[-]     Can diagnostic Channel 2
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[2].DiagInfo := _102_From_PLC_to_HMI_MachStatus.STS_INT[155]; //[-]     Can diagnostic Channel 2
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[2].iBusLoad := _102_From_PLC_to_HMI_MachStatus.STS_INT[156]; //[-]     Can diagnostic Channel 2
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[3].iErrorCntRx := _102_From_PLC_to_HMI_MachStatus.STS_INT[157]; //[-]     Can diagnostic Channel 3
(*CAN Network*)                     IO.Network.CAN.Sts.Ch_Status[3].iErrorCntTx := _102_From_PLC_to_HMI_MachStatus.STS_INT[158]; //[-]     Can diagnostic Channel 3
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[3].DiagInfo := _102_From_PLC_to_HMI_MachStatus.STS_INT[159]; //[-]     Can diagnostic Channel 3
(*CAN Network*)                        IO.Network.CAN.Sts.Ch_Status[3].iBusLoad := _102_From_PLC_to_HMI_MachStatus.STS_INT[160]; //[-]     Can diagnostic Channel 3
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[161]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[162]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[163]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[164]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[165]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[166]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[167]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[168]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[169]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[170]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[171]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[172]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[173]; //[-]     
(*CAN Network*)                                                         i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[174]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[175]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[176]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[177]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[178]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[179]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[180]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[181]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[182]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[183]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[184]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[185]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[186]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[187]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[188]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[189]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[190]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[191]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[192]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[193]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[194]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[195]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[196]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[197]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[198]; //[-]     
(*Spare*)                                                               i_Spare := _102_From_PLC_to_HMI_MachStatus.STS_INT[199]; //[-]     

////////////////////////////////////////////////////////////
// STS DINT
////////////////////////////////////////////////////////////

(*Statistics*) IO.Statistics.Sts.Dredging_Pump_Working_Hours := _102_From_PLC_to_HMI_MachStatus.STS_DINT[0]; // Dredging pump working hours
(*Statistics*)    IO.Statistics.Sts.Excavators_Working_Hours := _102_From_PLC_to_HMI_MachStatus.STS_DINT[1]; // Excavator working hours
(*Statistics*)        IO.Statistics.Sts.Engine_Running_Hours := _102_From_PLC_to_HMI_MachStatus.STS_DINT[2]; // Dredging pump working hours since last maintenance