
////////////////////////////////////////////////////////////
// STS BOOL
////////////////////////////////////////////////////////////

(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[0]   := IO.Pump_Dredge.Sts.Maintenance_Required;                         // Maintenance required on dredging pump
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[1]   := IO.Excavators.Sts.Maintenance_Required;                          // Maintenance required on excavators
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[2]   := IO.Engine.Sts.Maintenance_Required;                              // Maintenance required on engine
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[3]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[4]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[5]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[6]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[7]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[8]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[9]   := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[10]  := IO.Oil.Sts.Filter_1_Ok;                                          // Oil filter 1 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[11]  := IO.Oil.Sts.Filter_2_Ok;                                          // Oil filter 2 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[12]  := IO.Oil.Sts.Filter_3_Ok;                                          // Oil filter 3 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[13]  := IO.Oil.Sts.Filter_4_Ok;                                          // Oil filter 4 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[14]  := IO.Oil.Sts.Filter_5_Ok;                                          // Oil filter 5 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[15]  := IO.Oil.Sts.Filter_6_Ok;                                          // Oil filter 6 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[16]  := IO.Oil.Sts.Filter_7_Ok;                                          // Oil filter 7 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[17]  := IO.Oil.Sts.Filter_8_Ok;                                          // Oil filter 8 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[18]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[19]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[20]  := IO.Oil.Sts.Oil_Lvl_Above_Warning;                                // Oil level is above the warning level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[21]  := IO.Oil.Sts.Oil_Lvl_Above_Alarm;                                  // Oil level is above the alarm level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[22]  := IO.Oil.Sts.Oil_Temp_Below_Warning;                               // Oil temperature is below the warning level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[23]  := IO.Oil.Sts.Oil_Temp_Below_Alarm;                                 // Oil temperature is below the alarm level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[24]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[25]  := IO.Oil.Sts.Oil_Lvl_Reading_Error;                                // Oil level sensors are providing inconsistent readings
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[26]  := IO.Oil.Sts.Oil_Temp_Reading_Error;                               // Oil temp sensors are providing inconsistent readings
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[27]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[28]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[29]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[30]  := IO.Pump_Dredge.Sts.Running;                                      // Dredging pump is running
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[31]  := IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;      // Pressure sensor error
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[32]  := IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.xError_Sensor; // Pressure sensor error
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[33]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[34]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[35]  := IO.Pump_Dredge.Sts.Hydraulic_Cmd_Err;                            // Dredging pump command is in error (could be pump or valve)
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[36]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[37]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[38]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[39]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[40]  := IO.Excavators.Sts.Running;                                       // Excavators are running
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[41]  := IO.Excavators.Sts.Stopped;                                       // Excavators are stopped
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[42]  := IO.Excavators.Sts.Work_Running;                                  // Excavators are running in work direction
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[43]  := IO.Excavators.Sts.Reverse_Running;                               // Excavators are running in reverse direction
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[44]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[45]  := IO.Excavators.Sts.Valve_Error;                                   // Excavator valve is in error state
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[46]  := IO.Excavators.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;       // Pressure sensor error
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[47]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[48]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[49]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[50]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[51]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[52]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[53]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[54]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[55]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[56]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[57]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[58]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[59]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[60]  := IO.Propeller.Cmd.Up;                                             // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[61]  := IO.Propeller.Cmd.Down;                                           // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[62]  := IO.Propeller.Cmd.Left;                                           // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[63]  := IO.Propeller.Cmd.Right;                                          // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[64]  := IO.Propeller.Cmd.Forward;                                        // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[65]  := IO.Propeller.Cmd.Backward;                                       // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[66]  := IO.Propeller.Cmd.Joystick_Human_Presence;                        // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[67]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[68]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[69]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[70]  := IO.Propeller.Sts.Hydraulic_Valve_Error;                          // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[71]  := IO.Propeller.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;        // Pressure sensor error
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[72]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[73]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[74]  := IO.Propeller.Cmd.Joystick_Human_Presence;                        // The enable button is pressed properly to use the propeller
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[75]  := IO.Propeller.Sts.Running;                                        // The propeller is running fw/bw
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[76]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[77]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[78]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[79]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[80]  := IO.Hoist.Cmd.Wind;                                               // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[81]  := IO.Hoist.Cmd.Unwind;                                             // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[82]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[83]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[84]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[85]  := IO.Hoist.Sts.Pump_Depth.xError_Sensor;                           // Encoder depth error
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[86]  := IO.Hoist.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;            // Pressure sensor error
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[87]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[88]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[89]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[90]  := IO.Winches.Cmd.FL_Wind;                                          // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[91]  := IO.Winches.Cmd.FL_Unwind;                                        // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[92]  := IO.Winches.Cmd.RL_Wind;                                          // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[93]  := IO.Winches.Cmd.RL_Unwind;                                        // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[94]  := IO.Winches.Cmd.FR_Wind;                                          // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[95]  := IO.Winches.Cmd.FR_Unwind;                                        // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[96]  := IO.Winches.Cmd.RR_Wind;                                          // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[97]  := IO.Winches.Cmd.RR_Unwind;                                        // The operator is commanding  the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[98]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[99]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[100] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[101] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[102] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[103] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[104] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[105] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[106] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[107] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[108] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[109] := IO.Pvg_Services.Sts.Oil_Pressure.xError_Sensor;                  // Pressure sensor error
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[110] := IO.Fuel_Tank.Sts.Fuel_Level_1.xError_Sensor;                     // Anomaly on fuel tank level sensor
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[111] := IO.Fuel_Tank.Sts.Fuel_Level_2.xError_Sensor;                     // Anomaly on fual tenk level sensor
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[112] := IO.Fuel_Tank.Sts.Tank_1_Level_Low;                               // Fuel tank 1 below threshold
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[113] := IO.Fuel_Tank.Sts.Tank_2_Level_Low;                               // Fuel tank 2 below threshold
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[114] := IO.Fuel_Tank.Sts.Tank_1_Level_Empty;                             // Fuel tank 1 empty
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[115] := IO.Fuel_Tank.Sts.Tank_2_Level_Empty;                             // Fuel tank 2 empty
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[116] := IO.Fuel_Tank.Cmd.Left_Tank;                                      // Left tank in use
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[117] := IO.Fuel_Tank.Cmd.Right_Tank;                                     // Right tank in use
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[118] := x_Spare;                                                         // 
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[119] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[120] := IO.Internal_Signal.Sts.All_Parameters_Received;                  // All parameters written properly after a restore
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[121] := IO.Internal_Signal.Sts.Error_Writing_All_Parameter;              // Error during writing all parameters
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[122] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[123] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[124] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[125] := IO.System.Sts.PLC_ShuttingDown;                                  // PLC is shutting down
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[126] := IO.System.Cmd.Switch_Off_HMI;                                    // Command HMI shutdown
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[127] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[128] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[129] := IO.MachineMode.Sts.Inhibit_Change_Mode_To_Navi;                  // The navi mode switching is inhibited by some conditions
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[130] := IO.MachineMode.Sts.Inhibit_Change_Mode_To_Work;                  // The work mode switching is inhibited by some conditions
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[131] := IO.MachineMode.Sts.Inhibit_Navi_Show_Popup;                      // Show popup navi mode is inhibited
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[132] := IO.MachineMode.Sts.Inhibit_Work_Show_Popup;                      // Show popup work mode is inhibited
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[133] := IO.MachineMode.Sts.Press_Enable_Show_Popup;                      // Show popup enable is not pressed correctly
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[134] := IO.MachineMode.Sts.NotPossible_In_Work_Show_Popup;               // Operation not possible in work mode
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[135] := IO.MachineMode.Sts.NotPossible_In_Navi_Show_Popup;               // Operation not possible in navi mode
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[136] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[137] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[138] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[139] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[140] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[141] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[142] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[143] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[144] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[145] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[146] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[147] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[148] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[149] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[150] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[151] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[152] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[153] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[154] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[155] := IO.Event.Sts.Warning_Present;                                    // At least one warning is active in the machine
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[156] := IO.Event.Sts.Alarm_Present;                                      // At least one alarm is active in the machine
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[157] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[158] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[159] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[160] := IO.Network.CAN.Sts.DeviceStatus._05_CR2016_CP_Connection_Ok;     // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[161] := IO.Network.CAN.Sts.DeviceStatus._06_CR2016_OC_Connection_Ok;     // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[162] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[163] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[164] := IO.Network.CAN.Sts.DeviceStatus._15_CR2050_HYD_Connection_Ok;    // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[165] := IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok;        // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[166] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[167] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[168] := IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok;        // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[169] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[170] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[171] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[172] := IO.Network.CAN.Sts.DeviceStatus.Engine_Connection_Ok;            // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[173] := IO.Network.CAN.Sts.DeviceStatus.Joystick_Connection_Ok;          // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[174] := IO.Network.CAN.Sts.DeviceStatus.Inclinometer_Connection_Ok;      // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[175] := IO.Network.CAN.Sts.DeviceStatus.Propeller_Encoder_Connection_Ok; // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[176] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[177] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[178] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[179] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[180] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[181] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[182] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[183] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[184] := IO.Network.CAN.Sts.Ch_Status[0].xActive;                         // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[185] := IO.Network.CAN.Sts.Ch_Status[0].xError;                          // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[186] := IO.Network.CAN.Sts.Ch_Status[0].xWarningRx;                      // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[187] := IO.Network.CAN.Sts.Ch_Status[0].xWarningTx;                      // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[188] := IO.Network.CAN.Sts.Ch_Status[1].xActive;                         // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[189] := IO.Network.CAN.Sts.Ch_Status[1].xError;                          // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[190] := IO.Network.CAN.Sts.Ch_Status[1].xWarningRx;                      // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[191] := IO.Network.CAN.Sts.Ch_Status[1].xWarningTx;                      // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[192] := IO.Network.CAN.Sts.Ch_Status[2].xActive;                         // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[193] := IO.Network.CAN.Sts.Ch_Status[2].xError;                          // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[194] := IO.Network.CAN.Sts.Ch_Status[2].xWarningRx;                      // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[195] := IO.Network.CAN.Sts.Ch_Status[2].xWarningTx;                      // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[196] := IO.Network.CAN.Sts.Ch_Status[3].xActive;                         // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[197] := IO.Network.CAN.Sts.Ch_Status[3].xError;                          // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[198] := IO.Network.CAN.Sts.Ch_Status[3].xWarningRx;                      // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[199] := IO.Network.CAN.Sts.Ch_Status[3].xWarningTx;                      // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[200] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[201] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[202] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[203] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[204] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[205] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[206] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[207] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[208] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[209] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[210] := IO.Engine.Sts.Running;                                           // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[211] := IO.Engine.Sts.Warning;                                           // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[212] := IO.Engine.Sts.Alarm;                                             // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[213] := IO.Engine.Sts.Low_Oil_Pressure;                                  // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[214] := IO.Engine.Sts.Derating_Active;                                   // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[215] := IO.Engine.Sts.Regen.Request;                                     // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[216] := IO.Engine.Sts.Regen.Inhibit;                                     // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[217] := IO.Engine.Sts.Regen.Active;                                      // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[218] := IO.Engine.Sts.Regen.Temperature;                                 // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[219] := IO.Engine.Sts.Regen.Error;                                       // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[220] := IO.Engine.Sts.WaitBeforeCuttingPower;                            // Wait to shutdown PLC untile hte stage V purge is complete
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[221] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[222] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[223] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[224] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[225] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[226] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[227] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[228] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[229] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[230] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[231] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[232] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[233] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[234] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[235] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[236] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[237] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[238] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[239] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[240] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[241] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[242] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[243] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[244] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[245] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[246] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[247] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[248] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[249] := x_Spare;                                                         // 

////////////////////////////////////////////////////////////
// STS INT
////////////////////////////////////////////////////////////

(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[0]   := IO.Statistics.Sts.Dredging_Pump_Service_Hours;                //[h]     Dredging pump working hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[1]   := IO.Statistics.Sts.Excavators_Service_Hours;                   //[h]     Excavator working hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[2]   := IO.Statistics.Sts.Engine_Service_Hours;                       //[h]     Engine running hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[3]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[4]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[5]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[6]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[7]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[8]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[9]   := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[10]  := IO.Pump_Dredge.Sts.Setpoint_Perc_Ramped_Main;                 //[%]     Dredging pump speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[11]  := IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.iValue_x10;      //[bar]   Dredging pump oil pressure main circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[12]  := IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.iValue_x10; //[bar]   Dredging pump oil pressure secondary circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[13]  := IO.Pump_Dredge.Sts.Oil_Flow.iValue_x10;                       //[l/min] Dredging pump oil flow
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[14]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[15]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[16]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[17]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[18]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[19]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[20]  := IO.Excavators.Sts.Setpoint_Percentage;                        //[%]     Excavators speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[21]  := IO.Excavators.Sts.Oil_Pressure.Main_Circuit.iValue_x10;       //[bar]   Excavators oil pressure main circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[22]  := IO.Excavators.Sts.Oil_Pressure.Booster.iValue_x10;            //[bar]   Excavators oil pressure booster
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[23]  := IO.Excavators.Sts.Oil_Flow.iValue_x10;                        //[l/min] Excavators oil flow
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[24]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[25]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[26]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[27]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[28]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[29]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[30]  := IO.Propeller.Sts.Setpoint_Perc_Ramped_Main;                   //[%]     Propeller speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[31]  := IO.Propeller.Sts.Oil_Pressure.Main_Circuit.iValue_x10;        //[bar]   Propeller oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[32]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[33]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[34]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[35]  := IO.Hoist.Sts.Oil_Pressure.Main_Circuit.iValue_x10;            //[bar]   Hoist oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[36]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[37]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[38]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[39]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[40]  := IO.Pvg_Services.Sts.Oil_Pressure.iValue_x10;                  //[bar]   Service PVG oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[41]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[42]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[43]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[44]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[45]  := IO.Oil.Sts.Oil_Level.iValue_x10;                              //[%]     Oil tank level
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[46]  := IO.Oil.Sts.Oil_Temp.iValue_x10;                               //[°C]    Oil tank temperature
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[47]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[48]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[49]  := i_Spare;                                                      //[-]     
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[50]  := IO.Slurry.Sts.Density.iValue_x10;                             //[g/l]   Density of slurry
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[51]  := IO.Slurry.Sts.Flow.iValue_x10;                                //[m3/h]  Flow of slurry
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[52]  := IO.Slurry.Sts.Production;                                     //[Kg/h]  Actual production
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[53]  := i_Spare;                                                      //[-]     
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[54]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[55]  := IO.System.Sts.Battery_Voltage;                                //[V]     Battery voltage
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[56]  := IO.Internal_Signal.Sts.MachineStatus;                         //[-]     Machine status
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[57]  := IO.Internal_Signal.Sts.WorkingMode;                           //[-]     Working mode (1=Navigation,2=Dredging)
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[58]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[59]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[60]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[61]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[62]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[63]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[64]  := IO.System.Sts.INT_From_PLC;                                   //[-]     Incremental INT to test the communication
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[65]  := IO.Engine.Sts.Rpm;                                            //[rpm]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[66]  := IO.Engine.Sts.Torque;                                         //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[67]  := IO.Fuel_Tank.Sts.Fuel_Level_1.iValue_x10;                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[68]  := IO.Fuel_Tank.Sts.Fuel_Level_2.iValue_x10;                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[69]  := IO.Engine.Sts.Fuel_Consumption;                               //[l/h]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[70]  := IO.Engine.Sts.Oil_Pressure;                                   //[kpa]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[71]  := IO.Engine.Sts.Water_Temp;                                     //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[72]  := IO.Engine.Sts.IntakeAirTemp;                                  //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[73]  := IO.Engine.Sts.Load;                                           //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[74]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[75]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[76]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[77]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[78]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[79]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[80]  := IO.Engine.Sts.Urea_Level;                                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[81]  := IO.Engine.Sts.Urea_Temp;                                      //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[82]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[83]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[84]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[85]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[86]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[87]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[88]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[89]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[90]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[91]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[92]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[93]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[94]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[95]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[96]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[97]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[98]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[99]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[100] := IO.Engine.Sts.Percentage_Shutting_Down;                       //[%]     Percentage left until power can be cut from the motor
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[101] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[102] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[103] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[104] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[105] := IO.Propeller.Sts.Joystick.Joystick_Axis_X;                    //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[106] := IO.Propeller.Sts.Joystick.Joystick_Axis_Y;                    //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[107] := IO.Propeller.Sts.Encoder.iValue_x10;                          //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[108] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[109] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[110] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[111] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[112] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[113] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[114] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[115] := IO.Hoist.Sts.Pump_Depth.iValue_x10;                           //[dm]    Pump depth
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[116] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[117] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[118] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[119] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[120] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[121] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[122] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[123] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[124] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[125] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[126] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[127] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[128] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[129] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[130] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[131] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[132] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[133] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[134] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[135] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[136] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[137] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[138] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[139] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[140] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[141] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[142] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[143] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[144] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[145] := IO.Network.CAN.Sts.Ch_Status[0].iErrorCntRx;                  //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[146] := IO.Network.CAN.Sts.Ch_Status[0].iErrorCntTx;                  //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[147] := IO.Network.CAN.Sts.Ch_Status[0].DiagInfo;                     //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[148] := IO.Network.CAN.Sts.Ch_Status[0].iBusLoad;                     //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[149] := IO.Network.CAN.Sts.Ch_Status[1].iErrorCntRx;                  //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[150] := IO.Network.CAN.Sts.Ch_Status[1].iErrorCntTx;                  //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[151] := IO.Network.CAN.Sts.Ch_Status[1].DiagInfo;                     //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[152] := IO.Network.CAN.Sts.Ch_Status[1].iBusLoad;                     //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[153] := IO.Network.CAN.Sts.Ch_Status[2].iErrorCntRx;                  //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[154] := IO.Network.CAN.Sts.Ch_Status[2].iErrorCntTx;                  //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[155] := IO.Network.CAN.Sts.Ch_Status[2].DiagInfo;                     //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[156] := IO.Network.CAN.Sts.Ch_Status[2].iBusLoad;                     //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[157] := IO.Network.CAN.Sts.Ch_Status[3].iErrorCntRx;                  //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[158] := IO.Network.CAN.Sts.Ch_Status[3].iErrorCntTx;                  //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[159] := IO.Network.CAN.Sts.Ch_Status[3].DiagInfo;                     //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[160] := IO.Network.CAN.Sts.Ch_Status[3].iBusLoad;                     //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[161] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[162] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[163] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[164] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[165] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[166] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[167] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[168] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[169] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[170] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[171] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[172] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[173] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[174] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[175] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[176] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[177] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[178] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[179] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[180] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[181] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[182] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[183] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[184] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[185] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[186] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[187] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[188] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[189] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[190] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[191] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[192] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[193] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[194] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[195] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[196] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[197] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[198] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[199] := i_Spare;                                                      //[-]     

////////////////////////////////////////////////////////////
// STS DINT
////////////////////////////////////////////////////////////

(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[0] := IO.Statistics.Sts.Dredging_Pump_Working_Hours; // Dredging pump working hours
(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[1] := IO.Statistics.Sts.Excavators_Working_Hours;    // Excavator working hours
(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[2] := IO.Statistics.Sts.Engine_Running_Hours;        // Dredging pump working hours since last maintenance

////////////////////////////////////////////////////////////
// DEFAULT PARAMETERS BOOL
////////////////////////////////////////////////////////////

(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[0]   := FALSE; // CR2012 MC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[1]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[2]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[3]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[4]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[5]   := TRUE ; // CR2016 COMMAND PLANK Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[6]   := TRUE ; // CR2016 OC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[7]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[8]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[9]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[10]  := TRUE ; // CR2050 HYDRAULIC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[11]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[12]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[13]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[14]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[15]  := TRUE ; // PROPELLER JOYSTICK Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[16]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[17]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[18]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[19]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[20]  := FALSE; // INCLINOMETER Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[21]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[22]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[23]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[24]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[25]  := TRUE ; // ENCODER PROPELLER Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[26]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[27]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[28]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[29]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[30]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[31]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[32]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[33]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[34]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[35]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[36]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[37]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[38]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[39]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[40]  := TRUE ; // Data collection EXOR
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[41]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[42]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[43]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[44]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[45]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[46]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[47]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[48]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[49]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[50]  := TRUE ; // Pressure sensor PRESENT dredging pump oil main circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[51]  := TRUE ; // Pressure sensor PRESENT dredging pump oil secondary circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[52]  := TRUE ; // Pressure sensor PRESENT excavators oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[53]  := TRUE ; // Pressure sensor PRESENT PVG services oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[54]  := TRUE ; // Pressure sensor PRESENT Hoist oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[55]  := FALSE; // Pressure sensor PRESENT Propeller oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[56]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[57]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[58]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[59]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[60]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[61]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[62]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[63]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[64]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[65]  := FALSE; // Flometer sensor PRESENT dredging pump oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[66]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[67]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[68]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[69]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[70]  := TRUE ; // Filter 1 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[71]  := TRUE ; // Filter 2 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[72]  := TRUE ; // Filter 3 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[73]  := TRUE ; // Filter 4 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[74]  := TRUE ; // Filter 5 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[75]  := TRUE ; // Filter 6 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[76]  := FALSE; // Filter 7 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[77]  := FALSE; // Filter 8 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[78]  := FALSE; // Filter 9 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[79]  := FALSE; // Filter 10 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[80]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[81]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[82]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[83]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[84]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[85]  := TRUE ; // Encoder pump depth present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[86]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[87]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[88]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[89]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[90]  := FALSE; // Flometer sensor PRESENT slurry    
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[91]  := FALSE; // Density sensor PRESENT slurry
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[92]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[93]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[94]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[95]  := TRUE ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[96]  := TRUE ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[97]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[98]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[99]  := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[100] := TRUE ; // Temperature oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[101] := FALSE; // Level oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[102] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[103] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[104] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[105] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[106] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[107] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[108] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[109] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[110] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[111] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[112] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[113] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[114] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[115] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[116] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[117] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[118] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[119] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[120] := TRUE ; // Dredge Pump Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[121] := FALSE; // Excavators Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[122] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[123] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[124] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[125] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[126] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[127] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[128] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[129] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[130] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[131] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[132] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[133] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[134] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[135] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[136] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[137] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[138] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[139] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[140] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[141] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[142] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[143] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[144] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[145] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[146] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[147] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[148] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[149] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[150] := FALSE; // Bypass dredging pump main pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[151] := FALSE; // Bypass dredging pump secondary pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[152] := FALSE; // Bypass excavators pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[153] := FALSE; // Bypass hydraulic services PVG pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[154] := FALSE; // Bypass hoist pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[155] := FALSE; // Bypass propeller pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[156] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[157] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[158] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[159] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[160] := FALSE; // Oil flowmeter dredging pump
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[161] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[162] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[163] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[164] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[165] := FALSE; // Fuel tank level
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[166] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[167] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[168] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[169] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[170] := FALSE; // Oil temperature
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[171] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[172] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[173] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[174] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[175] := FALSE; // Oil level
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[176] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[177] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[178] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[179] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[180] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[181] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[182] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[183] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[184] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[185] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[186] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[187] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[188] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[189] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[190] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[191] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[192] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[193] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[194] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[195] := TRUE ; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[196] := FALSE; // Enable alarm missing communicatrion with remote IO
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[197] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[198] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[199] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[200] := TRUE ; // The enable button for the movement is present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[201] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[202] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[203] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[204] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[205] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[206] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[207] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[208] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[209] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[210] := TRUE ; // Excavators present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[211] := FALSE; // Propeller present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[212] := FALSE; // Hoist present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[213] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[214] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[215] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[216] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[217] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[218] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[219] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[220] := TRUE ; // The secondary oil circuit for dredging pump is always enabled
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[221] := TRUE ; // The dredging pump is commanded with a duplomatic valve 0-10V
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[222] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[223] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[224] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[225] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[226] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[227] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[228] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[229] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[230] := TRUE ; // Fuel tank - percentage management
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[231] := FALSE; // Fuel tank - timer management
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[232] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[233] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[234] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[235] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[236] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[237] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[238] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[239] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[240] := FALSE; // The oil cooling fans are electric
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[241] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[242] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[243] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[244] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[245] := FALSE; // Enable auto zeroing of propeller position (left-right)
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[246] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[247] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[248] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[249] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[250] := TRUE ; // Hoist reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[251] := FALSE; // Winch FL reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[252] := FALSE; // Winch FR reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[253] := FALSE; // Winch RL reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[254] := FALSE; // Winch RR reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[255] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[256] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[257] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[258] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[259] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[260] := TRUE ; // Excavators reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[261] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[262] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[263] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[264] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[265] := TRUE ; // Propeller helix reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[266] := FALSE; // Propeller left-right command reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[267] := FALSE; // Propeller up-down command reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[268] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[269] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[270] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[271] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[272] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[273] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[274] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[275] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[276] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[277] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[278] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[279] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[280] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[281] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[282] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[283] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[284] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[285] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[286] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[287] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[288] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[289] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[290] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[291] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[292] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[293] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[294] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[295] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[296] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[297] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[298] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[299] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[300] := TRUE ; // TSC1 speed control enable
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[301] := FALSE; // TSC1 CRC enable          
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[302] := FALSE; // ENGINE STAGE V
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[303] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[304] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[305] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[306] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[307] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[308] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[309] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[310] := FALSE; // Volvo Engine
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[311] := TRUE ; // CAT Engine
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[312] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[313] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[314] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[315] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[316] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[317] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[318] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[319] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[320] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[321] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[322] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[323] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[324] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[325] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[326] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[327] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[328] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[329] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[330] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[331] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[332] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[333] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[334] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[335] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[336] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[337] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[338] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[339] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[340] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[341] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[342] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[343] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[344] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[345] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[346] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[347] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[348] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[349] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[350] := TRUE ; // Air conditioning device present
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[351] := FALSE; // Inhibit switch off of panel and plc with ignition
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[352] := TRUE ; // Enable showing popup for error on machine mode management
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[353] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[354] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[355] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[356] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[357] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[358] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[359] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[360] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[361] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[362] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[363] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[364] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[365] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[366] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[367] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[368] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[369] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[370] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[371] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[372] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[373] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[374] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[375] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[376] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[377] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[378] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[379] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[380] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[381] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[382] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[383] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[384] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[385] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[386] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[387] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[388] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[389] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[390] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[391] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[392] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[393] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[394] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[395] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[396] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[397] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[398] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[399] := FALSE; // Spare