
////////////////////////////////////////////////////////////
// DEFAULT PAR BOOL
////////////////////////////////////////////////////////////

(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[0]   := FALSE; // CR2012 MC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[1]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[2]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[3]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[4]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[5]   := TRUE ; // CR2016 COMMAND PLANK Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[6]   := TRUE ; // CR2016 OC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[7]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[8]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[9]   := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[10]  := TRUE ; // CR2050 HYDRAULIC Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[11]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[12]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[13]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[14]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[15]  := TRUE ; // PROPELLER JOYSTICK Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[16]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[17]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[18]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[19]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[20]  := FALSE; // INCLINOMETER Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[21]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[22]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[23]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[24]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[25]  := TRUE ; // ENCODER PROPELLER Present
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[26]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[27]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[28]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[29]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[30]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[31]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[32]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[33]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[34]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[35]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[36]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[37]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[38]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[39]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[40]  := TRUE ; // Data collection EXOR
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[41]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[42]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[43]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[44]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[45]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[46]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[47]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[48]  := FALSE; // Spare
(*Network devices presence configuration*) DEFAULT_PARAMETERS_BOOL[49]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[50]  := TRUE ; // Pressure sensor PRESENT dredging pump oil main circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[51]  := TRUE ; // Pressure sensor PRESENT dredging pump oil secondary circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[52]  := TRUE ; // Pressure sensor PRESENT excavators oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[53]  := TRUE ; // Pressure sensor PRESENT PVG services oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[54]  := TRUE ; // Pressure sensor PRESENT Hoist oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[55]  := FALSE; // Pressure sensor PRESENT Propeller oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[56]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[57]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[58]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[59]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[60]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[61]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[62]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[63]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[64]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[65]  := FALSE; // Flometer sensor PRESENT dredging pump oil circuit
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[66]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[67]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[68]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[69]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[70]  := TRUE ; // Filter 1 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[71]  := TRUE ; // Filter 2 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[72]  := TRUE ; // Filter 3 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[73]  := TRUE ; // Filter 4 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[74]  := TRUE ; // Filter 5 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[75]  := TRUE ; // Filter 6 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[76]  := FALSE; // Filter 7 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[77]  := FALSE; // Filter 8 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[78]  := FALSE; // Filter 9 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[79]  := FALSE; // Filter 10 Present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[80]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[81]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[82]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[83]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[84]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[85]  := TRUE ; // Encoder pump depth present
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[86]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[87]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[88]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[89]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[90]  := FALSE; // Flometer sensor PRESENT slurry
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[91]  := FALSE; // Density sensor PRESENT slurry
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[92]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[93]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[94]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[95]  := TRUE ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[96]  := TRUE ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[97]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[98]  := FALSE; // Spare
(*Sensor presence configuration*)          DEFAULT_PARAMETERS_BOOL[99]  := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[100] := TRUE ; // Temperature oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[101] := FALSE; // Level oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[102] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[103] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[104] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[105] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[106] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[107] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[108] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[109] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[110] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[111] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[112] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[113] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[114] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[115] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[116] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[117] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[118] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[119] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[120] := TRUE ; // Dredge Pump Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[121] := FALSE; // Excavators Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[122] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[123] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[124] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[125] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[126] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[127] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[128] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[129] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[130] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[131] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[132] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[133] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[134] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[135] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[136] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[137] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[138] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[139] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[140] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[141] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[142] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[143] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[144] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[145] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[146] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[147] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[148] := FALSE; // Spare
(*Sensor/Commands analog/digital config*)  DEFAULT_PARAMETERS_BOOL[149] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[150] := FALSE; // Bypass dredging pump main pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[151] := FALSE; // Bypass dredging pump secondary pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[152] := FALSE; // Bypass excavators pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[153] := FALSE; // Bypass hydraulic services PVG pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[154] := FALSE; // Bypass hoist pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[155] := FALSE; // Bypass propeller pressure transducer
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[156] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[157] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[158] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[159] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[160] := FALSE; // Oil flowmeter dredging pump
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[161] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[162] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[163] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[164] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[165] := FALSE; // Fuel tank level
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[166] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[167] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[168] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[169] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[170] := FALSE; // Oil temperature
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[171] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[172] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[173] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[174] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[175] := FALSE; // Oil level
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[176] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[177] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[178] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[179] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[180] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[181] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[182] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[183] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[184] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[185] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[186] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[187] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[188] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[189] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[190] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[191] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[192] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[193] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[194] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[195] := TRUE ; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[196] := FALSE; // Enable alarm missing communicatrion with remote IO
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[197] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[198] := FALSE; // Spare
(*Bypass signals*)                         DEFAULT_PARAMETERS_BOOL[199] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[200] := TRUE ; // The enable button for the movement is present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[201] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[202] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[203] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[204] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[205] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[206] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[207] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[208] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[209] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[210] := TRUE ; // Excavators present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[211] := FALSE; // Propeller present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[212] := FALSE; // Hoist present
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[213] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[214] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[215] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[216] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[217] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[218] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[219] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[220] := TRUE ; // The secondary oil circuit for dredging pump is always enabled
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[221] := TRUE ; // The dredging pump is commanded with a duplomatic valve 0-10V
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[222] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[223] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[224] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[225] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[226] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[227] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[228] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[229] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[230] := TRUE ; // Fuel tank - percentage management
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[231] := FALSE; // Fuel tank - timer management
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[232] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[233] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[234] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[235] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[236] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[237] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[238] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[239] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[240] := FALSE; // The oil cooling fans are electric
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[241] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[242] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[243] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[244] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[245] := FALSE; // Enable auto zeroing of propeller position (left-right)
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[246] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[247] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[248] := FALSE; // Spare
(*Command configuration*)                  DEFAULT_PARAMETERS_BOOL[249] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[250] := TRUE ; // Hoist reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[251] := FALSE; // Winch FL reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[252] := FALSE; // Winch FR reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[253] := FALSE; // Winch RL reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[254] := FALSE; // Winch RR reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[255] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[256] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[257] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[258] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[259] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[260] := TRUE ; // Excavators reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[261] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[262] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[263] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[264] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[265] := TRUE ; // Propeller helix reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[266] := FALSE; // Propeller left-right command reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[267] := FALSE; // Propeller up-down command reverse direction
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[268] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[269] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[270] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[271] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[272] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[273] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[274] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[275] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[276] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[277] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[278] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[279] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[280] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[281] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[282] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[283] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[284] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[285] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[286] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[287] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[288] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[289] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[290] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[291] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[292] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[293] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[294] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[295] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[296] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[297] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[298] := FALSE; // Spare
(*Reverse signal or commands*)             DEFAULT_PARAMETERS_BOOL[299] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[300] := TRUE ; // TSC1 speed control enable
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[301] := FALSE; // TSC1 CRC enable
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[302] := FALSE; // ENGINE STAGE V
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[303] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[304] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[305] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[306] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[307] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[308] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[309] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[310] := FALSE; // Volvo Engine
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[311] := TRUE ; // CAT Engine
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[312] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[313] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[314] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[315] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[316] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[317] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[318] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[319] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[320] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[321] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[322] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[323] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[324] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[325] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[326] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[327] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[328] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[329] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[330] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[331] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[332] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[333] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[334] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[335] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[336] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[337] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[338] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[339] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[340] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[341] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[342] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[343] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[344] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[345] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[346] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[347] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[348] := FALSE; // Spare
(*Engine*)                                 DEFAULT_PARAMETERS_BOOL[349] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[350] := TRUE ; // Air conditioning device present
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[351] := FALSE; // Inhibit switch off of panel and plc with ignition
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[352] := TRUE ; // Enable showing popup for error on machine mode management
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[353] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[354] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[355] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[356] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[357] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[358] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[359] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[360] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[361] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[362] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[363] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[364] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[365] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[366] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[367] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[368] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[369] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[370] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[371] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[372] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[373] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[374] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[375] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[376] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[377] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[378] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[379] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[380] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[381] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[382] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[383] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[384] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[385] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[386] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[387] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[388] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[389] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[390] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[391] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[392] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[393] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[394] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[395] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[396] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[397] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[398] := FALSE; // Spare
(*Spare*)                                  DEFAULT_PARAMETERS_BOOL[399] := FALSE; // Spare

////////////////////////////////////////////////////////////
// DEFAULT PAR INT
////////////////////////////////////////////////////////////

(*Dredging pump*)   DEFAULT_PARAMETERS_INT[0]   := 10   ; //[%]     Dredging pump - Ramp ascending percentage step value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[1]   := 10   ; //[%]     Dredging pump - Ramp descending percentage step value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[2]   := 2000 ; //[ms]    Dredging pump - Ramp time base
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[3]   := 10   ; //[%]     Dredging pump - Starting percentage value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[4]   := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[5]   := 100  ; //[Hz]    Dredging pump - PWM Main command frequency
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[6]   := 0    ; //[-]     Dredging pump - PWM Main dither frequency
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[7]   := 0    ; //[-]     Dredging pump - PWM Main dither value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[8]   := 333  ; //[mA]    Dredging pump - PWM_I Main minimum current
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[9]   := 600  ; //[mA]    Dredging pump - PWM_I Main maximum current
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[10]  := 140  ; //[Hz]    Dredging pump - PWM Sec command frequency
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[11]  := 0    ; //[-]     Dredging pump - PWM Sec dither frequency
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[12]  := 0    ; //[-]     Dredging pump - PWM Sec dither value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[13]  := 150  ; //[mA]    Dredging pump - PWM_I Sec minimum current
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[14]  := 500  ; //[mA]    Dredging pump - PWM_I Sec maximum current
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[15]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[16]  := 10   ; //[s]     Delay to shut off the main valve and avoid undesired movement
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[17]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[18]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[19]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[20]  := 4000 ; //[mA]    Dredging pump - Pressure sensor minimum raw value main
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[21]  := 20000; //[mA]    Dredging pump - Pressure sensor maximum raw value main
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[22]  := 0    ; //[bar]   Dredging pump - Pressure minimum scaled value main
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[23]  := 400  ; //[bar]   Dredging pump - Pressure maximum scaled value main
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[24]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[25]  := 4000 ; //[mA]    Dredging pump - Flow sensor minimum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[26]  := 20000; //[mA]    Dredging pump - Flow sensor maximum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[27]  := 0    ; //[l/min] Dredging pump - Flow minimum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[28]  := 400  ; //[l/min] Dredging pump - Flow maximum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[29]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[30]  := 4000 ; //[mA]    Slurry - Flow sensor minimum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[31]  := 20000; //[mA]    Slurry - Flow sensor maximum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[32]  := 0    ; //[m3/h]  Slurry - Flow minimum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[33]  := 400  ; //[m3/h]  Slurry - Flow maximum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[34]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[35]  := 4000 ; //[mA]    Slurry - Density sensor minimum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[36]  := 20000; //[mA]    Slurry - Density sensor maximum value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[37]  := 0    ; //[-]     Slurry - Density minimum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[38]  := 400  ; //[-]     Slurry - Density maximum scaled value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[39]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[40]  := 10   ; //[%]     Jetring - Ramp ascending percentage step value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[41]  := 5    ; //[%]     Jetring - Ramp descending percentage step value
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[42]  := 2000 ; //[ms]    Jetring - Ramp time base
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[43]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[44]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[45]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[46]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[47]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[48]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[49]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[50]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[51]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[52]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[53]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[54]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[55]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[56]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[57]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[58]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[59]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[60]  := 4000 ; //[mA]    Dredging pump - Pressure sensor minimum raw value Secondary
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[61]  := 20000; //[mA]    Dredging pump - Pressure sensor maximum raw value Secondary
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[62]  := 0    ; //[bar]   Dredging pump - Pressure minimum scaled value Secondary
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[63]  := 400  ; //[bar]   Dredging pump - Pressure maximum scaled value Secondary
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[64]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[65]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[66]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[67]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[68]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[69]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[70]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[71]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[72]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[73]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[74]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[75]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[76]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[77]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[78]  := 0    ; //[-]     Spare
(*Dredging pump*)   DEFAULT_PARAMETERS_INT[79]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[80]  := 10   ; //[incr]  Excavators - Ramp ascending percentage step value
(*Excavators*)      DEFAULT_PARAMETERS_INT[81]  := 10   ; //[incr]  Excavators - Ramp descending percentage step value
(*Excavators*)      DEFAULT_PARAMETERS_INT[82]  := 2000 ; //[ms]    Excavators - Ramp time base
(*Excavators*)      DEFAULT_PARAMETERS_INT[83]  := 30   ; //[s]     Excavators - Timeout disable valve
(*Excavators*)      DEFAULT_PARAMETERS_INT[84]  := 50   ; //[%]     Excavators - PVEA Neutral
(*Excavators*)      DEFAULT_PARAMETERS_INT[85]  := 86   ; //[%]     Excavators - PVEA Max
(*Excavators*)      DEFAULT_PARAMETERS_INT[86]  := 10   ; //[%]     Excavators - PVEA Min
(*Excavators*)      DEFAULT_PARAMETERS_INT[87]  := 20   ; //[%]     Excavators - PVEA dead band
(*Excavators*)      DEFAULT_PARAMETERS_INT[88]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[89]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[90]  := 250  ; //[Hz]    Excavators - PWM command frequency
(*Excavators*)      DEFAULT_PARAMETERS_INT[91]  := 0    ; //[-]     Excavators - PWM dither frequency
(*Excavators*)      DEFAULT_PARAMETERS_INT[92]  := 0    ; //[-]     Excavators - PWM dither value
(*Excavators*)      DEFAULT_PARAMETERS_INT[93]  := 0    ; //[mA]    Excavators - PWM_I Main minimum current
(*Excavators*)      DEFAULT_PARAMETERS_INT[94]  := 0    ; //[mA]    Excavators - PWM_I Main maximum current
(*Excavators*)      DEFAULT_PARAMETERS_INT[95]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[96]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[97]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[98]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[99]  := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[100] := 4000 ; //[mA]    Excavators - Pressure sensor minimum raw value
(*Excavators*)      DEFAULT_PARAMETERS_INT[101] := 20000; //[mA]    Excavators - Pressure sensor maximum raw value
(*Excavators*)      DEFAULT_PARAMETERS_INT[102] := 0    ; //[bar]   Excavators - Pressure minimum scaled value
(*Excavators*)      DEFAULT_PARAMETERS_INT[103] := 400  ; //[bar]   Excavators - Pressure maximum scaled value
(*Excavators*)      DEFAULT_PARAMETERS_INT[104] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[105] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[106] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[107] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[108] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[109] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[110] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[111] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[112] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[113] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[114] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[115] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[116] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[117] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[118] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[119] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[120] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[121] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[122] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[123] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[124] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[125] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[126] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[127] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[128] := 0    ; //[-]     Spare
(*Excavators*)      DEFAULT_PARAMETERS_INT[129] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[130] := 20   ; //[%]     Hoist - Ramp ascending percentage step value
(*Movement*)        DEFAULT_PARAMETERS_INT[131] := 20   ; //[%]     Hoist - Ramp descending percentage step value
(*Movement*)        DEFAULT_PARAMETERS_INT[132] := 2000 ; //[ms]    Hoist - Ramp time base
(*Movement*)        DEFAULT_PARAMETERS_INT[133] := 30   ; //[s]     Hoist - Timeout disable valve
(*Movement*)        DEFAULT_PARAMETERS_INT[134] := 50   ; //[%]     Hoist - PVEA Neutral
(*Movement*)        DEFAULT_PARAMETERS_INT[135] := 85   ; //[%]     Hoist - PVEA Max
(*Movement*)        DEFAULT_PARAMETERS_INT[136] := 10   ; //[%]     Hoist - PVEA Min
(*Movement*)        DEFAULT_PARAMETERS_INT[137] := 20   ; //[%]     Hoist - PVEA dead band
(*Movement*)        DEFAULT_PARAMETERS_INT[138] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[139] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[140] := 250  ; //[Hz]    Hoist - PWM command frequency
(*Movement*)        DEFAULT_PARAMETERS_INT[141] := 0    ; //[-]     Hoist - PWM dither frequency
(*Movement*)        DEFAULT_PARAMETERS_INT[142] := 0    ; //[-]     Hoist - PWM dither value
(*Movement*)        DEFAULT_PARAMETERS_INT[143] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[144] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[145] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[146] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[147] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[148] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[149] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[150] := 4000 ; //[mA]    Hoist - Pressure sensor minimum raw value
(*Movement*)        DEFAULT_PARAMETERS_INT[151] := 20000; //[mA]    Hoist - Pressure sensor maximum raw value
(*Movement*)        DEFAULT_PARAMETERS_INT[152] := 0    ; //[bar]   Hoist - Pressure minimum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[153] := 400  ; //[bar]   Hoist - Pressure maximum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[154] := 4000 ; //[mA]    Service PVG - Pressure sensor minimum raw value
(*Movement*)        DEFAULT_PARAMETERS_INT[155] := 20000; //[mA]    Service PVG - Pressure sensor maximum raw value
(*Movement*)        DEFAULT_PARAMETERS_INT[156] := 0    ; //[bar]   Service PVG - Pressure minimum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[157] := 400  ; //[bar]   Service PVG - Pressure maximum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[158] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[159] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[160] := 4000 ; //[mA]    Pump depth - Encoder minimum value
(*Movement*)        DEFAULT_PARAMETERS_INT[161] := 20000; //[mA]    Pump depth - Encoder maximum value
(*Movement*)        DEFAULT_PARAMETERS_INT[162] := 0    ; //[m]     Pump depth - Depth minimum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[163] := 100  ; //[m]     Pump depth - Depth maximum scaled value
(*Movement*)        DEFAULT_PARAMETERS_INT[164] := 20   ; //[m]     Pump depth - Max depth preventing navi mode switching
(*Movement*)        DEFAULT_PARAMETERS_INT[165] := 1    ; //[100ms] Pump depth - Interval for picking value and calculate average
(*Movement*)        DEFAULT_PARAMETERS_INT[166] := 500  ; //[dm]    Pump depth - Max lenght hoist cable meters x 10
(*Movement*)        DEFAULT_PARAMETERS_INT[167] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[168] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[169] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[170] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[171] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[172] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[173] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[174] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[175] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[176] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[177] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[178] := 0    ; //[-]     Spare
(*Movement*)        DEFAULT_PARAMETERS_INT[179] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[180] := 10   ; //[%]     Propeller - Ramp ascending percentage step value
(*Propeller*)       DEFAULT_PARAMETERS_INT[181] := 10   ; //[%]     Propeller - Ramp descending percentage step value
(*Propeller*)       DEFAULT_PARAMETERS_INT[182] := 2000 ; //[ms]    Propeller - Ramp time base
(*Propeller*)       DEFAULT_PARAMETERS_INT[183] := 30   ; //[s]     Propeller - Timeout disable valve
(*Propeller*)       DEFAULT_PARAMETERS_INT[184] := 50   ; //[%]     Propeller - PVEA Neutral
(*Propeller*)       DEFAULT_PARAMETERS_INT[185] := 75   ; //[%]     Propeller - PVEA Max
(*Propeller*)       DEFAULT_PARAMETERS_INT[186] := 25   ; //[%]     Propeller - PVEA Min
(*Propeller*)       DEFAULT_PARAMETERS_INT[187] := 20   ; //[%]     Propeller - PVEA dead band
(*Propeller*)       DEFAULT_PARAMETERS_INT[188] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[189] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[190] := 250  ; //[Hz]    Propeller - PWM command frequency
(*Propeller*)       DEFAULT_PARAMETERS_INT[191] := 0    ; //[-]     Propeller - PWM dither frequency
(*Propeller*)       DEFAULT_PARAMETERS_INT[192] := 0    ; //[-]     Propeller - PWM dither value
(*Propeller*)       DEFAULT_PARAMETERS_INT[193] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[194] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[195] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[196] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[197] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[198] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[199] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[200] := 4000 ; //[mA]    Propeller - Pressure sensor minimum raw value
(*Propeller*)       DEFAULT_PARAMETERS_INT[201] := 20000; //[mA]    Propeller - Pressure sensor maximum raw value
(*Propeller*)       DEFAULT_PARAMETERS_INT[202] := 0    ; //[bar]   Propeller - Pressure minimum scaled value
(*Propeller*)       DEFAULT_PARAMETERS_INT[203] := 400  ; //[bar]   Propeller - Pressure maximum scaled value
(*Propeller*)       DEFAULT_PARAMETERS_INT[204] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[205] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[206] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[207] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[208] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[209] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[210] := 30   ; //[%]     Propeller - Threshold to reach to activate the propeller up and down
(*Propeller*)       DEFAULT_PARAMETERS_INT[211] := 70   ; //[%]     Propeller - Threshold to reach to activate the propeller left or right
(*Propeller*)       DEFAULT_PARAMETERS_INT[212] := 20   ; //[%]     Propeller - Threshold to reach to activate the propeller forward and backward
(*Propeller*)       DEFAULT_PARAMETERS_INT[213] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[214] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[215] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[216] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[217] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[218] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[219] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[220] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[221] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[222] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[223] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[224] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[225] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[226] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[227] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[228] := 0    ; //[-]     Spare
(*Propeller*)       DEFAULT_PARAMETERS_INT[229] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[230] := 40   ; //[°C]    Oil temperature - Start cooling fans threshold
(*Oil tank*)        DEFAULT_PARAMETERS_INT[231] := 30   ; //[°C]    Oil temperature - Stop cooling fans threshold
(*Oil tank*)        DEFAULT_PARAMETERS_INT[232] := 85   ; //[°C]    Oil temperature - Max temperature allowed - STOP ENGINE
(*Oil tank*)        DEFAULT_PARAMETERS_INT[233] := 80   ; //[°C]    Oil temperature - Warning oil temperature threshold
(*Oil tank*)        DEFAULT_PARAMETERS_INT[234] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[235] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[236] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[237] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[238] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[239] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[240] := 4000 ; //[mA]    Oil temperature - Sensor minimum value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[241] := 20000; //[mA]    Oil temperature - Sensor maximum value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[242] := -40  ; //[°C]    Oil temperature - minimum scaled value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[243] := 300  ; //[°C]    Oil temperature - maximum scaled value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[244] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[245] := 4000 ; //[mA]    Oil level - Sensor minimum value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[246] := 20000; //[mA]    Oil level - Sensor maximum value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[247] := 0    ; //[%]     Oil level - minimum scaled value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[248] := 100  ; //[%]     Oil level - maximum scaled value
(*Oil tank*)        DEFAULT_PARAMETERS_INT[249] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[250] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[251] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[252] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[253] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[254] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[255] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[256] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[257] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[258] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[259] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[260] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[261] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[262] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[263] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[264] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[265] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[266] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[267] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[268] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[269] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[270] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[271] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[272] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[273] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[274] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[275] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[276] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[277] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[278] := 0    ; //[-]     Spare
(*Oil tank*)        DEFAULT_PARAMETERS_INT[279] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[280] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[281] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[282] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[283] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[284] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[285] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[286] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[287] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[288] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[289] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[290] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[291] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[292] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[293] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[294] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[295] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[296] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[297] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[298] := 0    ; //[-]     Spare
(*Network*)         DEFAULT_PARAMETERS_INT[299] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[300] := 500  ; //[rpm]   Engine ON Rpm threshold
(*Engine*)          DEFAULT_PARAMETERS_INT[301] := 800  ; //[rpm]   Engine minimum speed
(*Engine*)          DEFAULT_PARAMETERS_INT[302] := 1930 ; //[rpm]   Engine maximum speed
(*Engine*)          DEFAULT_PARAMETERS_INT[303] := 100  ; //[rpm]   Speed decrement step value
(*Engine*)          DEFAULT_PARAMETERS_INT[304] := 100  ; //[rpm]   Speed increment step value
(*Engine*)          DEFAULT_PARAMETERS_INT[305] := 900  ; //[rpm]   Engine standby speed
(*Engine*)          DEFAULT_PARAMETERS_INT[306] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[307] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[308] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[309] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[310] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[311] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[312] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[313] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[314] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[315] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[316] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[317] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[318] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[319] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[320] := 5000 ; //[ms]    Engine communication breakdown delay
(*Engine*)          DEFAULT_PARAMETERS_INT[321] := 3000 ; //[ms]    Stop button delay
(*Engine*)          DEFAULT_PARAMETERS_INT[322] := 5000 ; //[ms]    Warm up delay
(*Engine*)          DEFAULT_PARAMETERS_INT[323] := 5000 ; //[ms]    Start command timeout
(*Engine*)          DEFAULT_PARAMETERS_INT[324] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[325] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[326] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[327] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[328] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[329] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[330] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[331] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[332] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[333] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[334] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[335] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[336] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[337] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[338] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[339] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[340] := 180  ; //[sec]   Delay shut down battery braker stage V engine
(*Engine*)          DEFAULT_PARAMETERS_INT[341] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[342] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[343] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[344] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[345] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[346] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[347] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[348] := 0    ; //[-]     Spare
(*Engine*)          DEFAULT_PARAMETERS_INT[349] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[350] := 2500 ; //[ms]    DigitalSensorAlarm_timeFilter
(*Events*)          DEFAULT_PARAMETERS_INT[351] := 2000 ; //[ms]    DigitalSensorWarning_timeFilter
(*Events*)          DEFAULT_PARAMETERS_INT[352] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[353] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[354] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[355] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[356] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[357] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[358] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[359] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[360] := 30   ; //[min]   Delay before the active alarms stops the engine
(*Events*)          DEFAULT_PARAMETERS_INT[361] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[362] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[363] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[364] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[365] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[366] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[367] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[368] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[369] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[370] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[371] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[372] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[373] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[374] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[375] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[376] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[377] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[378] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[379] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[380] := 3800 ; //[mA]    Minimum threshold before error for 4-20 mA sensors
(*Events*)          DEFAULT_PARAMETERS_INT[381] := 21000; //[mA]    Maximum threshold before error for 4-20 mA sensors
(*Events*)          DEFAULT_PARAMETERS_INT[382] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[383] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[384] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[385] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[386] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[387] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[388] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[389] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[390] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[391] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[392] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[393] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[394] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[395] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[396] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[397] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[398] := 0    ; //[-]     Spare
(*Events*)          DEFAULT_PARAMETERS_INT[399] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[400] := 120  ; //[sec]   Delay password expires
(*Internal signal*) DEFAULT_PARAMETERS_INT[401] := 6272 ; //[-]     Password Level 0
(*Internal signal*) DEFAULT_PARAMETERS_INT[402] := 6272 ; //[-]     Password Level 1
(*Internal signal*) DEFAULT_PARAMETERS_INT[403] := 6272 ; //[-]     Password Level 2
(*Internal signal*) DEFAULT_PARAMETERS_INT[404] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[405] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[406] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[407] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[408] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[409] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[410] := 200  ; //[sec]   PLC timeout shutdown seconds delay
(*Internal signal*) DEFAULT_PARAMETERS_INT[411] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[412] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[413] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[414] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[415] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[416] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[417] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[418] := 0    ; //[-]     Spare
(*Internal signal*) DEFAULT_PARAMETERS_INT[419] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[420] := 290  ; //[Ohm]   Fuel level - Sensor minimum raw value
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[421] := 15   ; //[Ohm]   Fuel level - Sensor maximum raw value
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[422] := 0    ; //[%]     Fuel level - Minimum scaled value
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[423] := 100  ; //[%]     Fuel level - Maximum scaled value
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[424] := 10   ; //[%]     Fuel level - Reserve threshold
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[425] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[426] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[427] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[428] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[429] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[430] := 300  ; //[sec]   Fuel tanks - timer to change tank
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[431] := 10   ; //[%]     Fuel tanks - max difference allowed between tanks
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[432] := 0    ; //[sec]   Fuel tanks - delay when switching. Keeps both tank connected
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[433] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[434] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[435] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[436] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[437] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[438] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[439] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[440] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[441] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[442] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[443] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[444] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[445] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[446] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[447] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[448] := 0    ; //[-]     Spare
(*Fuel tank*)       DEFAULT_PARAMETERS_INT[449] := 0    ; //[-]     Spare

////////////////////////////////////////////////////////////
// PAR BOOL
////////////////////////////////////////////////////////////

(*Network devices presence configuration*)                          IO.Network.CAN.Cfg._20_CR2012_MC_Present := PersistentVars.PAR_BOOL[0]  ; // CR2012 MC Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[1]  ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[2]  ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[3]  ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[4]  ; // Spare
(*Network devices presence configuration*)                IO.Network.CAN.Cfg._05_CR2016_CommandPlank_Present := PersistentVars.PAR_BOOL[5]  ; // CR2016 COMMAND PLANK Present
(*Network devices presence configuration*)                          IO.Network.CAN.Cfg._06_CR2016_OC_Present := PersistentVars.PAR_BOOL[6]  ; // CR2016 OC Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[7]  ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[8]  ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[9]  ; // Spare
(*Network devices presence configuration*)                        IO.Network.CAN.Cfg._15_CR2050_Hydr_Present := PersistentVars.PAR_BOOL[10] ; // CR2050 HYDRAULIC Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[11] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[12] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[13] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[14] ; // Spare
(*Network devices presence configuration*)                     IO.Network.CAN.Cfg.Propeller_Joystick_Present := PersistentVars.PAR_BOOL[15] ; // PROPELLER JOYSTICK Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[16] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[17] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[18] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[19] ; // Spare
(*Network devices presence configuration*)                      IO.Network.CAN.Cfg.Hull_Inclinometer_Present := PersistentVars.PAR_BOOL[20] ; // INCLINOMETER Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[21] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[22] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[23] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[24] ; // Spare
(*Network devices presence configuration*)                      IO.Network.CAN.Cfg.Propeller_Encoder_Present := PersistentVars.PAR_BOOL[25] ; // ENCODER PROPELLER Present
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[26] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[27] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[28] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[29] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[30] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[31] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[32] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[33] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[34] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[35] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[36] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[37] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[38] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[39] ; // Spare
(*Network devices presence configuration*)                        IO.Network.DataCollection.Cfg.Exor_Present := PersistentVars.PAR_BOOL[40] ; // Data collection EXOR
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[41] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[42] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[43] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[44] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[45] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[46] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[47] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[48] ; // Spare
(*Network devices presence configuration*)                                                           x_Spare := PersistentVars.PAR_BOOL[49] ; // Spare
(*Sensor presence configuration*)                        IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Sensor_Present := PersistentVars.PAR_BOOL[50] ; // Pressure sensor PRESENT dredging pump oil main circuit
(*Sensor presence configuration*)                      IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Sensor_Present := PersistentVars.PAR_BOOL[51] ; // Pressure sensor PRESENT dredging pump oil secondary circuit
(*Sensor presence configuration*)                              IO.Excavators.Cfg.Oil_Pressure.Sensor_Present := PersistentVars.PAR_BOOL[52] ; // Pressure sensor PRESENT excavators oil circuit
(*Sensor presence configuration*)                            IO.Pvg_Services.Cfg.Oil_Pressure.Sensor_Present := PersistentVars.PAR_BOOL[53] ; // Pressure sensor PRESENT PVG services oil circuit
(*Sensor presence configuration*)                                   IO.Hoist.Cfg.Oil_Pressure.Sensor_Present := PersistentVars.PAR_BOOL[54] ; // Pressure sensor PRESENT Hoist oil circuit
(*Sensor presence configuration*)                               IO.Propeller.Cfg.Oil_Pressure.Sensor_Present := PersistentVars.PAR_BOOL[55] ; // Pressure sensor PRESENT Propeller oil circuit
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[56] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[57] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[58] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[59] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[60] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[61] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[62] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[63] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[64] ; // Spare
(*Sensor presence configuration*)                                 IO.Pump_Dredge.Cfg.Oil_Flow.Sensor_Present := PersistentVars.PAR_BOOL[65] ; // Flometer sensor PRESENT dredging pump oil circuit
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[66] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[67] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[68] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[69] ; // Spare
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_1_Present := PersistentVars.PAR_BOOL[70] ; // Filter 1 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_2_Present := PersistentVars.PAR_BOOL[71] ; // Filter 2 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_3_Present := PersistentVars.PAR_BOOL[72] ; // Filter 3 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_4_Present := PersistentVars.PAR_BOOL[73] ; // Filter 4 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_5_Present := PersistentVars.PAR_BOOL[74] ; // Filter 5 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_6_Present := PersistentVars.PAR_BOOL[75] ; // Filter 6 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_7_Present := PersistentVars.PAR_BOOL[76] ; // Filter 7 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_8_Present := PersistentVars.PAR_BOOL[77] ; // Filter 8 Present
(*Sensor presence configuration*)                                                IO.Oil.Cfg.Filter_9_Present := PersistentVars.PAR_BOOL[78] ; // Filter 9 Present
(*Sensor presence configuration*)                                               IO.Oil.Cfg.Filter_10_Present := PersistentVars.PAR_BOOL[79] ; // Filter 10 Present
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[80] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[81] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[82] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[83] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[84] ; // Spare
(*Sensor presence configuration*)                                  IO.Hoist.Cfg.Encoder_Depth.Sensor_Present := PersistentVars.PAR_BOOL[85] ; // Encoder pump depth present
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[86] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[87] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[88] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[89] ; // Spare
(*Sensor presence configuration*)                                   IO.Slurry.Cfg.Flow_Sensor.Sensor_Present := PersistentVars.PAR_BOOL[90] ; // Flometer sensor PRESENT slurry
(*Sensor presence configuration*)                                IO.Slurry.Cfg.Density_Sensor.Sensor_Present := PersistentVars.PAR_BOOL[91] ; // Density sensor PRESENT slurry
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[92] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[93] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[94] ; // Spare
(*Sensor presence configuration*)                             IO.Fuel_Tank.Cfg.Level_Sensor_1.Sensor_Present := PersistentVars.PAR_BOOL[95] ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)                             IO.Fuel_Tank.Cfg.Level_Sensor_2.Sensor_Present := PersistentVars.PAR_BOOL[96] ; // Level sensor PRESENT fuel (always analog)
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[97] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[98] ; // Spare
(*Sensor presence configuration*)                                                                    x_Spare := PersistentVars.PAR_BOOL[99] ; // Spare
(*Sensor/Commands analog/digital config*)                              IO.Oil.Cfg.Temp_Analog.Sensor_Present := PersistentVars.PAR_BOOL[100]; // Temperature oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)                             IO.Oil.Cfg.Level_Analog.Sensor_Present := PersistentVars.PAR_BOOL[101]; // Level oil tank sensor type: 0=Digital/1=Analog
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[102]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[103]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[104]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[105]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[106]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[107]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[108]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[109]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[110]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[111]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[112]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[113]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[114]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[115]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[116]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[117]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[118]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[119]; // Spare
(*Sensor/Commands analog/digital config*)                             IO.Pump_Dredge.Cfg.Command_Type.Analog := PersistentVars.PAR_BOOL[120]; // Dredge Pump Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)                              IO.Excavators.Cfg.Command_Type.Analog := PersistentVars.PAR_BOOL[121]; // Excavators Command Type 0=Digitale/1=Analogico
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[122]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[123]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[124]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[125]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[126]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[127]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[128]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[129]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[130]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[131]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[132]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[133]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[134]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[135]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[136]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[137]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[138]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[139]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[140]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[141]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[142]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[143]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[144]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[145]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[146]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[147]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[148]; // Spare
(*Sensor/Commands analog/digital config*)                                                            x_Spare := PersistentVars.PAR_BOOL[149]; // Spare
(*Bypass signals*)                                IO.Pump_Dredge.Hmi.Bypass_Pressure_Sensor_Oil_Main_Circuit := PersistentVars.PAR_BOOL[150]; // Bypass dredging pump main pressure transducer
(*Bypass signals*)                                 IO.Pump_Dredge.Hmi.Bypass_Pressure_Sensor_Oil_Sec_Circuit := PersistentVars.PAR_BOOL[151]; // Bypass dredging pump secondary pressure transducer
(*Bypass signals*)                                      IO.Excavators.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := PersistentVars.PAR_BOOL[152]; // Bypass excavators pressure transducer
(*Bypass signals*)                                    IO.Pvg_Services.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := PersistentVars.PAR_BOOL[153]; // Bypass hydraulic services PVG pressure transducer
(*Bypass signals*)                                           IO.Hoist.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := PersistentVars.PAR_BOOL[154]; // Bypass hoist pressure transducer
(*Bypass signals*)                                       IO.Propeller.Hmi.Bypass_Pressure_Sensor_Oil_Circuit := PersistentVars.PAR_BOOL[155]; // Bypass propeller pressure transducer
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[156]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[157]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[158]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[159]; // Spare
(*Bypass signals*)                                           IO.Pump_Dredge.Hmi.Bypass_Flowmeter_Oil_Circuit := PersistentVars.PAR_BOOL[160]; // Oil flowmeter dredging pump
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[161]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[162]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[163]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[164]; // Spare
(*Bypass signals*)                                                      IO.Fuel_Tank.Hmi.Bypass_Level_Sensor := PersistentVars.PAR_BOOL[165]; // Fuel tank level
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[166]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[167]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[168]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[169]; // Spare
(*Bypass signals*)                                                                    IO.Oil.Hmi.Bypass_Temp := PersistentVars.PAR_BOOL[170]; // Oil temperature
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[171]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[172]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[173]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[174]; // Spare
(*Bypass signals*)                                                                   IO.Oil.Hmi.Bypass_Level := PersistentVars.PAR_BOOL[175]; // Oil level
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[176]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[177]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[178]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[179]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[180]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[181]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[182]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[183]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[184]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[185]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[186]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[187]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[188]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[189]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[190]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[191]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[192]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[193]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[194]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[195]; // Spare
(*Bypass signals*)                                        IO.Event.Cfg.Enable_Stop_For_Missing_Comm_RemoteIO := PersistentVars.PAR_BOOL[196]; // Enable alarm missing communicatrion with remote IO
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[197]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[198]; // Spare
(*Bypass signals*)                                                                                   x_Spare := PersistentVars.PAR_BOOL[199]; // Spare
(*Command configuration*)                              IO.Internal_Signal.Cfg.EnableButtonForMovementPresent := PersistentVars.PAR_BOOL[200]; // The enable button for the movement is present
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[201]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[202]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[203]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[204]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[205]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[206]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[207]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[208]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[209]; // Spare
(*Command configuration*)                                                          IO.Excavators.Cfg.Present := PersistentVars.PAR_BOOL[210]; // Excavators present
(*Command configuration*)                                                           IO.Propeller.Cfg.Present := PersistentVars.PAR_BOOL[211]; // Propeller present
(*Command configuration*)                                                               IO.Hoist.Cfg.Present := PersistentVars.PAR_BOOL[212]; // Hoist present
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[213]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[214]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[215]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[216]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[217]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[218]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[219]; // Spare
(*Command configuration*)                  IO.Pump_Dredge.Cfg.Hydraulic_Cmd.Secondary_Circuit_Always_Enabled := PersistentVars.PAR_BOOL[220]; // The secondary oil circuit for dredging pump is always enabled
(*Command configuration*)                                          IO.Pump_Dredge.Cfg.DuplomaticValvePresent := PersistentVars.PAR_BOOL[221]; // The dredging pump is commanded with a duplomatic valve 0-10V
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[222]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[223]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[224]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[225]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[226]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[227]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[228]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[229]; // Spare
(*Command configuration*)                                             IO.Fuel_Tank.Cfg.Percentage_Management := PersistentVars.PAR_BOOL[230]; // Fuel tank - percentage management
(*Command configuration*)                                                  IO.Fuel_Tank.Cfg.Timer_Management := PersistentVars.PAR_BOOL[231]; // Fuel tank - timer management
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[232]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[233]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[234]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[235]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[236]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[237]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[238]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[239]; // Spare
(*Command configuration*)                                               IO.Oil.Cfg.Oil_Cooling_Fans_Electric := PersistentVars.PAR_BOOL[240]; // The oil cooling fans are electric
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[241]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[242]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[243]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[244]; // Spare
(*Command configuration*)                                                   IO.Propeller.Cfg.Enable_AutoZero := PersistentVars.PAR_BOOL[245]; // Enable auto zeroing of propeller position (left-right)
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[246]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[247]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[248]; // Spare
(*Command configuration*)                                                                            x_Spare := PersistentVars.PAR_BOOL[249]; // Spare
(*Reverse signal or commands*)                                                        IO.Hoist.Cfg.Direction := PersistentVars.PAR_BOOL[250]; // Hoist reverse direction
(*Reverse signal or commands*)                                           IO.Winches.Cfg.FL_Reverse_Direction := PersistentVars.PAR_BOOL[251]; // Winch FL reverse direction
(*Reverse signal or commands*)                                           IO.Winches.Cfg.FR_Reverse_Direction := PersistentVars.PAR_BOOL[252]; // Winch FR reverse direction
(*Reverse signal or commands*)                                           IO.Winches.Cfg.RL_Reverse_Direction := PersistentVars.PAR_BOOL[253]; // Winch RL reverse direction
(*Reverse signal or commands*)                                           IO.Winches.Cfg.RR_Reverse_Direction := PersistentVars.PAR_BOOL[254]; // Winch RR reverse direction
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[255]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[256]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[257]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[258]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[259]; // Spare
(*Reverse signal or commands*)                                                   IO.Excavators.Cfg.Direction := PersistentVars.PAR_BOOL[260]; // Excavators reverse direction
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[261]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[262]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[263]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[264]; // Spare
(*Reverse signal or commands*)                                                    IO.Propeller.Cfg.Direction := PersistentVars.PAR_BOOL[265]; // Propeller helix reverse direction
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[266]; // Propeller left-right command reverse direction
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[267]; // Propeller up-down command reverse direction
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[268]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[269]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[270]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[271]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[272]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[273]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[274]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[275]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[276]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[277]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[278]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[279]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[280]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[281]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[282]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[283]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[284]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[285]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[286]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[287]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[288]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[289]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[290]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[291]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[292]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[293]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[294]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[295]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[296]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[297]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[298]; // Spare
(*Reverse signal or commands*)                                                                       x_Spare := PersistentVars.PAR_BOOL[299]; // Spare
(*Engine*)                                                          IO.Engine.Cfg.x_engineSpeedControlEnable := PersistentVars.PAR_BOOL[300]; // TSC1 speed control enable
(*Engine*)                                                                    IO.Engine.Cfg.x_TSC1_CRCenable := PersistentVars.PAR_BOOL[301]; // TSC1 CRC enable
(*Engine*)                                                                              IO.Engine.Cfg.StageV := PersistentVars.PAR_BOOL[302]; // ENGINE STAGE V
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[303]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[304]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[305]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[306]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[307]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[308]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[309]; // Spare
(*Engine*)                                                                   IO.Engine.Cfg.Motor_Brand.Volvo := PersistentVars.PAR_BOOL[310]; // Volvo Engine
(*Engine*)                                                                     IO.Engine.Cfg.Motor_Brand.CAT := PersistentVars.PAR_BOOL[311]; // CAT Engine
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[312]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[313]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[314]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[315]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[316]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[317]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[318]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[319]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[320]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[321]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[322]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[323]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[324]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[325]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[326]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[327]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[328]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[329]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[330]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[331]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[332]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[333]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[334]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[335]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[336]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[337]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[338]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[339]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[340]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[341]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[342]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[343]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[344]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[345]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[346]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[347]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[348]; // Spare
(*Engine*)                                                                                           x_Spare := PersistentVars.PAR_BOOL[349]; // Spare
(*Spare*)                                                                    IO.Air_Conditioning.Cfg.Present := PersistentVars.PAR_BOOL[350]; // Air conditioning device present
(*Spare*)                                                          IO.Internal_Signal.Cfg.Inhibit_Switch_Off := PersistentVars.PAR_BOOL[351]; // Inhibit switch off of panel and plc with ignition
(*Spare*)                                                      IO.MachineMode.Cfg.Enable_Machine_mode_Popups := PersistentVars.PAR_BOOL[352]; // Enable showing popup for error on machine mode management
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[353]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[354]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[355]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[356]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[357]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[358]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[359]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[360]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[361]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[362]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[363]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[364]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[365]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[366]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[367]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[368]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[369]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[370]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[371]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[372]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[373]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[374]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[375]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[376]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[377]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[378]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[379]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[380]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[381]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[382]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[383]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[384]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[385]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[386]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[387]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[388]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[389]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[390]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[391]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[392]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[393]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[394]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[395]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[396]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[397]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[398]; // Spare
(*Spare*)                                                                                            x_Spare := PersistentVars.PAR_BOOL[399]; // Spare

////////////////////////////////////////////////////////////
// PAR INT
////////////////////////////////////////////////////////////

(*Dredging pump*)             IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampAscendingPercValue := PersistentVars.PAR_INT[1]  ; //[%]     Dredging pump - Ramp ascending percentage step value
(*Dredging pump*)            IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampDescendingPercValue := PersistentVars.PAR_INT[2]  ; //[%]     Dredging pump - Ramp descending percentage step value
(*Dredging pump*)                       IO.Pump_Dredge.Cfg.Hydraulic_Cmd.RampTimeBase := PersistentVars.PAR_INT[3]  ; //[ms]    Dredging pump - Ramp time base
(*Dredging pump*)                  IO.Pump_Dredge.Cfg.Hydraulic_Cmd.StartingValuePerc := PersistentVars.PAR_INT[4]  ; //[%]     Dredging pump - Starting percentage value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[5]  ; //[-]     Spare
(*Dredging pump*)           IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiFrequency := PersistentVars.PAR_INT[6]  ; //[Hz]    Dredging pump - PWM Main command frequency
(*Dredging pump*)     IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiDitherFrequency := PersistentVars.PAR_INT[7]  ; //[-]     Dredging pump - PWM Main dither frequency
(*Dredging pump*)         IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uiDitherValue := PersistentVars.PAR_INT[8]  ; //[-]     Dredging pump - PWM Main dither value
(*Dredging pump*)              IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uimA_Min := PersistentVars.PAR_INT[9]  ; //[mA]    Dredging pump - PWM_I Main minimum current
(*Dredging pump*)              IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Main.uimA_Max := PersistentVars.PAR_INT[10] ; //[mA]    Dredging pump - PWM_I Main maximum current
(*Dredging pump*)         IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiFrequency := PersistentVars.PAR_INT[11] ; //[Hz]    Dredging pump - PWM Sec command frequency
(*Dredging pump*)   IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiDitherFrequency := PersistentVars.PAR_INT[12] ; //[-]     Dredging pump - PWM Sec dither frequency
(*Dredging pump*)       IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uiDitherValue := PersistentVars.PAR_INT[13] ; //[-]     Dredging pump - PWM Sec dither value
(*Dredging pump*)            IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uimA_Min := PersistentVars.PAR_INT[14] ; //[mA]    Dredging pump - PWM_I Sec minimum current
(*Dredging pump*)            IO.Pump_Dredge.Cfg.Hydraulic_Cmd.CFG_PWM_Second.uimA_Max := PersistentVars.PAR_INT[15] ; //[mA]    Dredging pump - PWM_I Sec maximum current
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[16] ; //[-]     Spare
(*Dredging pump*)                       IO.Pump_Dredge.Cfg.Hydraulic_Cmd.DelayShutOff := PersistentVars.PAR_INT[17] ; //[s]     Delay to shut off the main valve and avoid undesired movement
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[18] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[19] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[20] ; //[-]     Spare
(*Dredging pump*)                  IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Min_Raw_Value := PersistentVars.PAR_INT[21] ; //[mA]    Dredging pump - Pressure sensor minimum raw value main
(*Dredging pump*)                  IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Max_Raw_Value := PersistentVars.PAR_INT[22] ; //[mA]    Dredging pump - Pressure sensor maximum raw value main
(*Dredging pump*)               IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Min_Scaled_Value := PersistentVars.PAR_INT[23] ; //[bar]   Dredging pump - Pressure minimum scaled value main
(*Dredging pump*)               IO.Pump_Dredge.Cfg.Oil_Pressure_Main.Max_Scaled_Value := PersistentVars.PAR_INT[24] ; //[bar]   Dredging pump - Pressure maximum scaled value main
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[25] ; //[-]     Spare
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Oil_Flow.Min_Raw_Value := PersistentVars.PAR_INT[26] ; //[mA]    Dredging pump - Flow sensor minimum value
(*Dredging pump*)                           IO.Pump_Dredge.Cfg.Oil_Flow.Max_Raw_Value := PersistentVars.PAR_INT[27] ; //[mA]    Dredging pump - Flow sensor maximum value
(*Dredging pump*)                        IO.Pump_Dredge.Cfg.Oil_Flow.Min_Scaled_Value := PersistentVars.PAR_INT[28] ; //[l/min] Dredging pump - Flow minimum scaled value
(*Dredging pump*)                        IO.Pump_Dredge.Cfg.Oil_Flow.Max_Scaled_Value := PersistentVars.PAR_INT[29] ; //[l/min] Dredging pump - Flow maximum scaled value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[30] ; //[-]     Spare
(*Dredging pump*)                             IO.Slurry.Cfg.Flow_Sensor.Min_Raw_Value := PersistentVars.PAR_INT[31] ; //[mA]    Slurry - Flow sensor minimum value
(*Dredging pump*)                             IO.Slurry.Cfg.Flow_Sensor.Max_Raw_Value := PersistentVars.PAR_INT[32] ; //[mA]    Slurry - Flow sensor maximum value
(*Dredging pump*)                          IO.Slurry.Cfg.Flow_Sensor.Min_Scaled_Value := PersistentVars.PAR_INT[33] ; //[m3/h]  Slurry - Flow minimum scaled value
(*Dredging pump*)                          IO.Slurry.Cfg.Flow_Sensor.Max_Scaled_Value := PersistentVars.PAR_INT[34] ; //[m3/h]  Slurry - Flow maximum scaled value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[35] ; //[-]     Spare
(*Dredging pump*)                          IO.Slurry.Cfg.Density_Sensor.Min_Raw_Value := PersistentVars.PAR_INT[36] ; //[mA]    Slurry - Density sensor minimum value
(*Dredging pump*)                          IO.Slurry.Cfg.Density_Sensor.Max_Raw_Value := PersistentVars.PAR_INT[37] ; //[mA]    Slurry - Density sensor maximum value
(*Dredging pump*)                       IO.Slurry.Cfg.Density_Sensor.Min_Scaled_Value := PersistentVars.PAR_INT[38] ; //[-]     Slurry - Density minimum scaled value
(*Dredging pump*)                       IO.Slurry.Cfg.Density_Sensor.Max_Scaled_Value := PersistentVars.PAR_INT[39] ; //[-]     Slurry - Density maximum scaled value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[40] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[41] ; //[%]     Jetring - Ramp ascending percentage step value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[42] ; //[%]     Jetring - Ramp descending percentage step value
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[43] ; //[ms]    Jetring - Ramp time base
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[44] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[45] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[46] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[47] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[48] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[49] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[50] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[51] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[52] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[53] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[54] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[55] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[56] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[57] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[58] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[59] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[60] ; //[-]     Spare
(*Dredging pump*)                IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Min_Raw_Value := PersistentVars.PAR_INT[61] ; //[mA]    Dredging pump - Pressure sensor minimum raw value Secondary
(*Dredging pump*)                IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Max_Raw_Value := PersistentVars.PAR_INT[62] ; //[mA]    Dredging pump - Pressure sensor maximum raw value Secondary
(*Dredging pump*)             IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Min_Scaled_Value := PersistentVars.PAR_INT[63] ; //[bar]   Dredging pump - Pressure minimum scaled value Secondary
(*Dredging pump*)             IO.Pump_Dredge.Cfg.Oil_Pressure_Second.Max_Scaled_Value := PersistentVars.PAR_INT[64] ; //[bar]   Dredging pump - Pressure maximum scaled value Secondary
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[65] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[66] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[67] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[68] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[69] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[70] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[71] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[72] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[73] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[74] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[75] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[76] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[77] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[78] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[79] ; //[-]     Spare
(*Dredging pump*)                                                             i_Spare := PersistentVars.PAR_INT[80] ; //[-]     Spare
(*Excavators*)                 IO.Excavators.Cfg.Hydraulic_Cmd.RampAscendingPercValue := PersistentVars.PAR_INT[81] ; //[incr]  Excavators - Ramp ascending percentage step value
(*Excavators*)                IO.Excavators.Cfg.Hydraulic_Cmd.RampDescendingPercValue := PersistentVars.PAR_INT[82] ; //[incr]  Excavators - Ramp descending percentage step value
(*Excavators*)                           IO.Excavators.Cfg.Hydraulic_Cmd.RampTimeBase := PersistentVars.PAR_INT[83] ; //[ms]    Excavators - Ramp time base
(*Excavators*)                  IO.Excavators.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := PersistentVars.PAR_INT[84] ; //[s]     Excavators - Timeout disable valve
(*Excavators*)                     IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := PersistentVars.PAR_INT[85] ; //[%]     Excavators - PVEA Neutral
(*Excavators*)                         IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Max_Value := PersistentVars.PAR_INT[86] ; //[%]     Excavators - PVEA Max
(*Excavators*)                         IO.Excavators.Cfg.Hydraulic_Cmd.PVEA_Min_Value := PersistentVars.PAR_INT[87] ; //[%]     Excavators - PVEA Min
(*Excavators*)                               IO.Excavators.Cfg.Hydraulic_Cmd.DeadBand := PersistentVars.PAR_INT[88] ; //[%]     Excavators - PVEA dead band
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[89] ; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[90] ; //[-]     Spare
(*Excavators*)                    IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := PersistentVars.PAR_INT[91] ; //[Hz]    Excavators - PWM command frequency
(*Excavators*)              IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency := PersistentVars.PAR_INT[92] ; //[-]     Excavators - PWM dither frequency
(*Excavators*)                  IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := PersistentVars.PAR_INT[93] ; //[-]     Excavators - PWM dither value
(*Excavators*)                       IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uimA_Min := PersistentVars.PAR_INT[94] ; //[mA]    Excavators - PWM_I Main minimum current
(*Excavators*)                       IO.Excavators.Cfg.Hydraulic_Cmd.CFG_PWM.uimA_Min := PersistentVars.PAR_INT[95] ; //[mA]    Excavators - PWM_I Main maximum current
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[96] ; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[97] ; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[98] ; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[99] ; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[100]; //[-]     Spare
(*Excavators*)                           IO.Excavators.Cfg.Oil_Pressure.Min_Raw_Value := PersistentVars.PAR_INT[101]; //[mA]    Excavators - Pressure sensor minimum raw value
(*Excavators*)                           IO.Excavators.Cfg.Oil_Pressure.Max_Raw_Value := PersistentVars.PAR_INT[102]; //[mA]    Excavators - Pressure sensor maximum raw value
(*Excavators*)                        IO.Excavators.Cfg.Oil_Pressure.Min_Scaled_Value := PersistentVars.PAR_INT[103]; //[bar]   Excavators - Pressure minimum scaled value
(*Excavators*)                        IO.Excavators.Cfg.Oil_Pressure.Max_Scaled_Value := PersistentVars.PAR_INT[104]; //[bar]   Excavators - Pressure maximum scaled value
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[105]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[106]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[107]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[108]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[109]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[110]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[111]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[112]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[113]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[114]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[115]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[116]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[117]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[118]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[119]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[120]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[121]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[122]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[123]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[124]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[125]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[126]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[127]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[128]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[129]; //[-]     Spare
(*Excavators*)                                                                i_Spare := PersistentVars.PAR_INT[130]; //[-]     Spare
(*Movement*)                        IO.Hoist.Cfg.Hydraulic_Cmd.RampAscendingPercValue := PersistentVars.PAR_INT[131]; //[%]     Hoist - Ramp ascending percentage step value
(*Movement*)                       IO.Hoist.Cfg.Hydraulic_Cmd.RampDescendingPercValue := PersistentVars.PAR_INT[132]; //[%]     Hoist - Ramp descending percentage step value
(*Movement*)                                  IO.Hoist.Cfg.Hydraulic_Cmd.RampTimeBase := PersistentVars.PAR_INT[133]; //[ms]    Hoist - Ramp time base
(*Movement*)                         IO.Hoist.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := PersistentVars.PAR_INT[134]; //[s]     Hoist - Timeout disable valve
(*Movement*)                            IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := PersistentVars.PAR_INT[135]; //[%]     Hoist - PVEA Neutral
(*Movement*)                                IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Max_Value := PersistentVars.PAR_INT[136]; //[%]     Hoist - PVEA Max
(*Movement*)                                IO.Hoist.Cfg.Hydraulic_Cmd.PVEA_Min_Value := PersistentVars.PAR_INT[137]; //[%]     Hoist - PVEA Min
(*Movement*)                                      IO.Hoist.Cfg.Hydraulic_Cmd.DeadBand := PersistentVars.PAR_INT[138]; //[%]     Hoist - PVEA dead band
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[139]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[140]; //[-]     Spare
(*Movement*)                           IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := PersistentVars.PAR_INT[141]; //[Hz]    Hoist - PWM command frequency
(*Movement*)                     IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency := PersistentVars.PAR_INT[142]; //[-]     Hoist - PWM dither frequency
(*Movement*)                         IO.Hoist.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := PersistentVars.PAR_INT[143]; //[-]     Hoist - PWM dither value
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[144]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[145]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[146]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[147]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[148]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[149]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[150]; //[-]     Spare
(*Movement*)                                  IO.Hoist.Cfg.Oil_Pressure.Min_Raw_Value := PersistentVars.PAR_INT[151]; //[mA]    Hoist - Pressure sensor minimum raw value
(*Movement*)                                  IO.Hoist.Cfg.Oil_Pressure.Max_Raw_Value := PersistentVars.PAR_INT[152]; //[mA]    Hoist - Pressure sensor maximum raw value
(*Movement*)                               IO.Hoist.Cfg.Oil_Pressure.Min_Scaled_Value := PersistentVars.PAR_INT[153]; //[bar]   Hoist - Pressure minimum scaled value
(*Movement*)                               IO.Hoist.Cfg.Oil_Pressure.Max_Scaled_Value := PersistentVars.PAR_INT[154]; //[bar]   Hoist - Pressure maximum scaled value
(*Movement*)                           IO.Pvg_Services.Cfg.Oil_Pressure.Min_Raw_Value := PersistentVars.PAR_INT[155]; //[mA]    Service PVG - Pressure sensor minimum raw value
(*Movement*)                           IO.Pvg_Services.Cfg.Oil_Pressure.Max_Raw_Value := PersistentVars.PAR_INT[156]; //[mA]    Service PVG - Pressure sensor maximum raw value
(*Movement*)                        IO.Pvg_Services.Cfg.Oil_Pressure.Min_Scaled_Value := PersistentVars.PAR_INT[157]; //[bar]   Service PVG - Pressure minimum scaled value
(*Movement*)                        IO.Pvg_Services.Cfg.Oil_Pressure.Max_Scaled_Value := PersistentVars.PAR_INT[158]; //[bar]   Service PVG - Pressure maximum scaled value
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[159]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[160]; //[-]     Spare
(*Movement*)                                 IO.Hoist.Cfg.Encoder_Depth.Min_Raw_Value := PersistentVars.PAR_INT[161]; //[mA]    Pump depth - Encoder minimum value
(*Movement*)                                 IO.Hoist.Cfg.Encoder_Depth.Max_Raw_Value := PersistentVars.PAR_INT[162]; //[mA]    Pump depth - Encoder maximum value
(*Movement*)                              IO.Hoist.Cfg.Encoder_Depth.Min_Scaled_Value := PersistentVars.PAR_INT[163]; //[m]     Pump depth - Depth minimum scaled value
(*Movement*)                              IO.Hoist.Cfg.Encoder_Depth.Max_Scaled_Value := PersistentVars.PAR_INT[164]; //[m]     Pump depth - Depth maximum scaled value
(*Movement*)                                 IO.Hoist.Cfg.Depth_Treshold_Inhibit_Navi := PersistentVars.PAR_INT[165]; //[m]     Pump depth - Max depth preventing navi mode switching
(*Movement*)                                  IO.Hoist.Cfg.Value_Interval_For_Average := PersistentVars.PAR_INT[166]; //[100ms] Pump depth - Interval for picking value and calculate average
(*Movement*)                                        IO.Hoist.Cfg.Max_Cable_Meters_x10 := PersistentVars.PAR_INT[167]; //[dm]    Pump depth - Max lenght hoist cable meters x 10
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[168]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[169]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[170]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[171]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[172]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[173]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[174]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[175]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[176]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[177]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[178]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[179]; //[-]     Spare
(*Movement*)                                                                  i_Spare := PersistentVars.PAR_INT[180]; //[-]     Spare
(*Propeller*)                   IO.Propeller.Cfg.Hydraulic_Cmd.RampAscendingPercValue := PersistentVars.PAR_INT[181]; //[%]     Propeller - Ramp ascending percentage step value
(*Propeller*)                  IO.Propeller.Cfg.Hydraulic_Cmd.RampDescendingPercValue := PersistentVars.PAR_INT[182]; //[%]     Propeller - Ramp descending percentage step value
(*Propeller*)                             IO.Propeller.Cfg.Hydraulic_Cmd.RampTimeBase := PersistentVars.PAR_INT[183]; //[ms]    Propeller - Ramp time base
(*Propeller*)                    IO.Propeller.Cfg.Hydraulic_Cmd.TimeoutDisableValve_s := PersistentVars.PAR_INT[184]; //[s]     Propeller - Timeout disable valve
(*Propeller*)                       IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Neutral_Value := PersistentVars.PAR_INT[185]; //[%]     Propeller - PVEA Neutral
(*Propeller*)                           IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Max_Value := PersistentVars.PAR_INT[186]; //[%]     Propeller - PVEA Max
(*Propeller*)                           IO.Propeller.Cfg.Hydraulic_Cmd.PVEA_Min_Value := PersistentVars.PAR_INT[187]; //[%]     Propeller - PVEA Min
(*Propeller*)                                 IO.Propeller.Cfg.Hydraulic_Cmd.DeadBand := PersistentVars.PAR_INT[188]; //[%]     Propeller - PVEA dead band
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[189]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[190]; //[-]     Spare
(*Propeller*)                      IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiFrequency := PersistentVars.PAR_INT[191]; //[Hz]    Propeller - PWM command frequency
(*Propeller*)                IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherFrequency := PersistentVars.PAR_INT[192]; //[-]     Propeller - PWM dither frequency
(*Propeller*)                    IO.Propeller.Cfg.Hydraulic_Cmd.CFG_PWM.uiDitherValue := PersistentVars.PAR_INT[193]; //[-]     Propeller - PWM dither value
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[194]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[195]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[196]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[197]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[198]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[199]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[200]; //[-]     Spare
(*Propeller*)                             IO.Propeller.Cfg.Oil_Pressure.Min_Raw_Value := PersistentVars.PAR_INT[201]; //[mA]    Propeller - Pressure sensor minimum raw value
(*Propeller*)                             IO.Propeller.Cfg.Oil_Pressure.Max_Raw_Value := PersistentVars.PAR_INT[202]; //[mA]    Propeller - Pressure sensor maximum raw value
(*Propeller*)                          IO.Propeller.Cfg.Oil_Pressure.Min_Scaled_Value := PersistentVars.PAR_INT[203]; //[bar]   Propeller - Pressure minimum scaled value
(*Propeller*)                          IO.Propeller.Cfg.Oil_Pressure.Max_Scaled_Value := PersistentVars.PAR_INT[204]; //[bar]   Propeller - Pressure maximum scaled value
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[205]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[206]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[207]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[208]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[209]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[210]; //[-]     Spare
(*Propeller*)                          IO.Propeller.Cfg.Joystick.Threshold_UpDown_Cmd := PersistentVars.PAR_INT[211]; //[%]     Propeller - Threshold to reach to activate the propeller up and down
(*Propeller*)                              IO.Propeller.Cfg.Joystick.Threshold_LR_Cmd := PersistentVars.PAR_INT[212]; //[%]     Propeller - Threshold to reach to activate the propeller left or right
(*Propeller*)                            IO.Propeller.Cfg.Joystick.Threshold_FwBw_Cmd := PersistentVars.PAR_INT[213]; //[%]     Propeller - Threshold to reach to activate the propeller forward and backward
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[214]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[215]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[216]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[217]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[218]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[219]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[220]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[221]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[222]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[223]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[224]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[225]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[226]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[227]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[228]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[229]; //[-]     Spare
(*Propeller*)                                                                 i_Spare := PersistentVars.PAR_INT[230]; //[-]     Spare
(*Oil tank*)                                             IO.Oil.Cfg.Limits.Start_Fans := PersistentVars.PAR_INT[231]; //[°C]    Oil temperature - Start cooling fans threshold
(*Oil tank*)                                              IO.Oil.Cfg.Limits.Stop_Fans := PersistentVars.PAR_INT[232]; //[°C]    Oil temperature - Stop cooling fans threshold
(*Oil tank*)                                            IO.Oil.Cfg.Limits.Alarm_Limit := PersistentVars.PAR_INT[233]; //[°C]    Oil temperature - Max temperature allowed - STOP ENGINE
(*Oil tank*)                                          IO.Oil.Cfg.Limits.Warning_Limit := PersistentVars.PAR_INT[234]; //[°C]    Oil temperature - Warning oil temperature threshold
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[235]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[236]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[237]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[238]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[239]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[240]; //[-]     Spare
(*Oil tank*)                                     IO.Oil.Cfg.Temp_Analog.Min_Raw_Value := PersistentVars.PAR_INT[241]; //[mA]    Oil temperature - Sensor minimum value
(*Oil tank*)                                     IO.Oil.Cfg.Temp_Analog.Max_Raw_Value := PersistentVars.PAR_INT[242]; //[mA]    Oil temperature - Sensor maximum value
(*Oil tank*)                                  IO.Oil.Cfg.Temp_Analog.Min_Scaled_Value := PersistentVars.PAR_INT[243]; //[°C]    Oil temperature - minimum scaled value
(*Oil tank*)                                  IO.Oil.Cfg.Temp_Analog.Max_Scaled_Value := PersistentVars.PAR_INT[244]; //[°C]    Oil temperature - maximum scaled value
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[245]; //[-]     Spare
(*Oil tank*)                                    IO.Oil.Cfg.Level_Analog.Min_Raw_Value := PersistentVars.PAR_INT[246]; //[mA]    Oil level - Sensor minimum value
(*Oil tank*)                                    IO.Oil.Cfg.Level_Analog.Max_Raw_Value := PersistentVars.PAR_INT[247]; //[mA]    Oil level - Sensor maximum value
(*Oil tank*)                                 IO.Oil.Cfg.Level_Analog.Min_Scaled_Value := PersistentVars.PAR_INT[248]; //[%]     Oil level - minimum scaled value
(*Oil tank*)                                 IO.Oil.Cfg.Level_Analog.Max_Scaled_Value := PersistentVars.PAR_INT[249]; //[%]     Oil level - maximum scaled value
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[250]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[251]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[252]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[253]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[254]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[255]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[256]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[257]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[258]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[259]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[260]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[261]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[262]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[263]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[264]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[265]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[266]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[267]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[268]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[269]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[270]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[271]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[272]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[273]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[274]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[275]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[276]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[277]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[278]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[279]; //[-]     Spare
(*Oil tank*)                                                                  i_Spare := PersistentVars.PAR_INT[280]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[281]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[282]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[283]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[284]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[285]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[286]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[287]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[288]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[289]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[290]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[291]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[292]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[293]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[294]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[295]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[296]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[297]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[298]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[299]; //[-]     Spare
(*Network*)                                                                   i_Spare := PersistentVars.PAR_INT[300]; //[-]     Spare
(*Engine*)                                      IO.Engine.Cfg.Engine_ON_Rpm_Threshold := PersistentVars.PAR_INT[301]; //[rpm]   Engine ON Rpm threshold
(*Engine*)                                         IO.Engine.Cfg.Engine_Min_Speed_rpm := PersistentVars.PAR_INT[302]; //[rpm]   Engine minimum speed
(*Engine*)                                         IO.Engine.Cfg.Engine_Max_Speed_rpm := PersistentVars.PAR_INT[303]; //[rpm]   Engine maximum speed
(*Engine*)                                          IO.Engine.Cfg.Speed_Decrement_rpm := PersistentVars.PAR_INT[304]; //[rpm]   Speed decrement step value
(*Engine*)                                          IO.Engine.Cfg.Speed_Increment_rpm := PersistentVars.PAR_INT[305]; //[rpm]   Speed increment step value
(*Engine*)                                         IO.Engine.Cfg.Engine_Standby_Speed := PersistentVars.PAR_INT[306]; //[rpm]   Engine standby speed
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[307]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[308]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[309]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[310]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[311]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[312]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[313]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[314]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[315]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[316]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[317]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[318]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[319]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[320]; //[-]     Spare
(*Engine*)                                  IO.Engine.Cfg.Engine_Comm_Breakdown_Delay := PersistentVars.PAR_INT[321]; //[ms]    Engine communication breakdown delay
(*Engine*)                                            IO.Engine.Cfg.Stop_Button_Delay := PersistentVars.PAR_INT[322]; //[ms]    Stop button delay
(*Engine*)                                                IO.Engine.Cfg.Warm_Up_Delay := PersistentVars.PAR_INT[323]; //[ms]    Warm up delay
(*Engine*)                                                IO.Engine.Cfg.Start_Timeout := PersistentVars.PAR_INT[324]; //[ms]    Start command timeout
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[325]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[326]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[327]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[328]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[329]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[330]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[331]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[332]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[333]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[334]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[335]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[336]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[337]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[338]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[339]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[340]; //[-]     Spare
(*Engine*)                                    IO.Signal_Lamp.Cfg.i_batteryBreakerTime := PersistentVars.PAR_INT[341]; //[sec]   Delay shut down battery braker stage V engine
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[342]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[343]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[344]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[345]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[346]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[347]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[348]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[349]; //[-]     Spare
(*Engine*)                                                                    i_Spare := PersistentVars.PAR_INT[350]; //[-]     Spare
(*Events*)                               IO.Event.Cfg.i_DigitalSensorAlarm_timeFilter := PersistentVars.PAR_INT[351]; //[ms]    DigitalSensorAlarm_timeFilter
(*Events*)                             IO.Event.Cfg.i_DigitalSensorWarning_timeFilter := PersistentVars.PAR_INT[352]; //[ms]    DigitalSensorWarning_timeFilter
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[353]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[354]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[355]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[356]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[357]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[358]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[359]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[360]; //[-]     Spare
(*Events*)                             IO.Event.Cfg.Minutes_Before_Alarm_Stops_Engine := PersistentVars.PAR_INT[361]; //[min]   Delay before the active alarms stops the engine
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[362]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[363]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[364]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[365]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[366]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[367]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[368]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[369]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[370]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[371]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[372]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[373]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[374]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[375]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[376]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[377]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[378]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[379]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[380]; //[-]     Spare
(*Events*)                                IO.Physical_IO.Cfg.min4_20_sensorErrorValue := PersistentVars.PAR_INT[381]; //[mA]    Minimum threshold before error for 4-20 mA sensors
(*Events*)                                IO.Physical_IO.Cfg.max4_20_sensorErrorValue := PersistentVars.PAR_INT[382]; //[mA]    Maximum threshold before error for 4-20 mA sensors
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[383]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[384]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[385]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[386]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[387]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[388]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[389]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[390]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[391]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[392]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[393]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[394]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[395]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[396]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[397]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[398]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[399]; //[-]     Spare
(*Events*)                                                                    i_Spare := PersistentVars.PAR_INT[400]; //[-]     Spare
(*Internal signal*)                 IO.internal_Signal.Cfg.Password.Delay_Pass_Expire := PersistentVars.PAR_INT[401]; //[sec]   Delay password expires
(*Internal signal*)                          IO.internal_Signal.Cfg.Password.Level[0] := PersistentVars.PAR_INT[402]; //[-]     Password Level 0
(*Internal signal*)                          IO.internal_Signal.Cfg.Password.Level[1] := PersistentVars.PAR_INT[403]; //[-]     Password Level 1
(*Internal signal*)                          IO.internal_Signal.Cfg.Password.Level[2] := PersistentVars.PAR_INT[404]; //[-]     Password Level 2
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[405]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[406]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[407]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[408]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[409]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[410]; //[-]     Spare
(*Internal signal*)               IO.System.Cfg.Power_Manage.Timeout_Shutdown_Off_Sec := PersistentVars.PAR_INT[411]; //[sec]   PLC timeout shutdown seconds delay
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[412]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[413]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[414]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[415]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[416]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[417]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[418]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[419]; //[-]     Spare
(*Internal signal*)                                                           i_Spare := PersistentVars.PAR_INT[420]; //[-]     Spare
(*Fuel tank*)                           IO.Fuel_Tank.Cfg.Level_Sensor_1.Min_Raw_Value := PersistentVars.PAR_INT[421]; //[Ohm]   Fuel level - Sensor minimum raw value
(*Fuel tank*)                           IO.Fuel_Tank.Cfg.Level_Sensor_1.Max_Raw_Value := PersistentVars.PAR_INT[422]; //[Ohm]   Fuel level - Sensor maximum raw value
(*Fuel tank*)                        IO.Fuel_Tank.Cfg.Level_Sensor_1.Min_Scaled_Value := PersistentVars.PAR_INT[423]; //[%]     Fuel level - Minimum scaled value
(*Fuel tank*)                        IO.Fuel_Tank.Cfg.Level_Sensor_1.Max_Scaled_Value := PersistentVars.PAR_INT[424]; //[%]     Fuel level - Maximum scaled value
(*Fuel tank*)                                 IO.Fuel_Tank.Cfg.Reserve_Threshold_Perc := PersistentVars.PAR_INT[425]; //[%]     Fuel level - Reserve threshold
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[426]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[427]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[428]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[429]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[430]; //[-]     Spare
(*Fuel tank*)                                   IO.Fuel_Tank.Cfg.Timer_To_Change_Tank := PersistentVars.PAR_INT[431]; //[sec]   Fuel tanks - timer to change tank
(*Fuel tank*)                                       IO.Fuel_Tank.Cfg.Max_Diff_Allowed := PersistentVars.PAR_INT[432]; //[%]     Fuel tanks - max difference allowed between tanks
(*Fuel tank*)                               IO.Fuel_Tank.Cfg.Delay_Both_Tanks_Working := PersistentVars.PAR_INT[433]; //[sec]   Fuel tanks - delay when switching. Keeps both tank connected
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[434]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[435]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[436]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[437]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[438]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[439]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[440]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[441]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[442]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[443]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[444]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[445]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[446]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[447]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[448]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[449]; //[-]     Spare
(*Fuel tank*)                                                                 i_Spare := PersistentVars.PAR_INT[450]; //[-]     Spare

////////////////////////////////////////////////////////////
// STS BOOL
////////////////////////////////////////////////////////////

(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[0]   := IO.Pump_Dredge.Sts.Maintenance_Required;                         // Maintenance required on dredging pump
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[1]   := IO.Excavators.Sts.Maintenance_Required;                          // Maintenance required on excavators
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[2]   := IO.Engine.Sts.Maintenance_Required;                              // Maintenance required on engine
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[3]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[4]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[5]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[6]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[7]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[8]   := x_Spare;                                                         // 
(*Statistics*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[9]   := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[10]  := IO.Oil.Sts.Filter_1_Ok;                                          // Oil filter 1 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[11]  := IO.Oil.Sts.Filter_2_Ok;                                          // Oil filter 2 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[12]  := IO.Oil.Sts.Filter_3_Ok;                                          // Oil filter 3 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[13]  := IO.Oil.Sts.Filter_4_Ok;                                          // Oil filter 4 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[14]  := IO.Oil.Sts.Filter_5_Ok;                                          // Oil filter 5 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[15]  := IO.Oil.Sts.Filter_6_Ok;                                          // Oil filter 6 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[16]  := IO.Oil.Sts.Filter_7_Ok;                                          // Oil filter 7 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[17]  := IO.Oil.Sts.Filter_8_Ok;                                          // Oil filter 8 ok - 0=not ok , 1=ok
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[18]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[19]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[20]  := IO.Oil.Sts.Oil_Lvl_Above_Warning;                                // Oil level is above the warning level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[21]  := IO.Oil.Sts.Oil_Lvl_Above_Alarm;                                  // Oil level is above the alarm level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[22]  := IO.Oil.Sts.Oil_Temp_Below_Warning;                               // Oil temperature is below the warning level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[23]  := IO.Oil.Sts.Oil_Temp_Below_Alarm;                                 // Oil temperature is below the alarm level
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[24]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[25]  := IO.Oil.Sts.Oil_Lvl_Reading_Error;                                // Oil level sensors are providing inconsistent readings
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[26]  := IO.Oil.Sts.Oil_Temp_Reading_Error;                               // Oil temp sensors are providing inconsistent readings
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[27]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[28]  := x_Spare;                                                         // 
(*Hydraulic*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[29]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[30]  := IO.Pump_Dredge.Sts.Running;                                      // Dredging pump is running
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[31]  := IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;      // Pressure sensor error
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[32]  := IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.xError_Sensor; // Pressure sensor error
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[33]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[34]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[35]  := IO.Pump_Dredge.Sts.Hydraulic_Cmd_Err;                            // Dredging pump command is in error (could be pump or valve)
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[36]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[37]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[38]  := x_Spare;                                                         // 
(*Dredging pump*) _102_From_PLC_to_HMI_MachStatus.STS_BOOL[39]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[40]  := IO.Excavators.Sts.Running;                                       // Excavators are running
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[41]  := IO.Excavators.Sts.Stopped;                                       // Excavators are stopped
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[42]  := IO.Excavators.Sts.Work_Running;                                  // Excavators are running in work direction
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[43]  := IO.Excavators.Sts.Reverse_Running;                               // Excavators are running in reverse direction
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[44]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[45]  := IO.Excavators.Sts.Valve_Error;                                   // Excavator valve is in error state
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[46]  := IO.Excavators.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;       // Pressure sensor error
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[47]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[48]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[49]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[50]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[51]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[52]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[53]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[54]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[55]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[56]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[57]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[58]  := x_Spare;                                                         // 
(*Excavators*)    _102_From_PLC_to_HMI_MachStatus.STS_BOOL[59]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[60]  := IO.Propeller.Cmd.Up;                                             // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[61]  := IO.Propeller.Cmd.Down;                                           // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[62]  := IO.Propeller.Cmd.Left;                                           // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[63]  := IO.Propeller.Cmd.Right;                                          // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[64]  := IO.Propeller.Cmd.Forward;                                        // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[65]  := IO.Propeller.Cmd.Backward;                                       // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[66]  := IO.Propeller.Cmd.Joystick_Human_Presence;                        // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[67]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[68]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[69]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[70]  := IO.Propeller.Sts.Hydraulic_Valve_Error;                          // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[71]  := IO.Propeller.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;        // Pressure sensor error
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[72]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[73]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[74]  := IO.Propeller.Cmd.Joystick_Human_Presence;                        // The enable button is pressed properly to use the propeller
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[75]  := IO.Propeller.Sts.Running;                                        // The propeller is running fw/bw
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[76]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[77]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[78]  := x_Spare;                                                         // 
(*Propeller*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[79]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[80]  := IO.Hoist.Cmd.Wind;                                               // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[81]  := IO.Hoist.Cmd.Unwind;                                             // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[82]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[83]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[84]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[85]  := IO.Hoist.Sts.Pump_Depth.xError_Sensor;                           // Encoder depth error
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[86]  := IO.Hoist.Sts.Oil_Pressure.Main_Circuit.xError_Sensor;            // Pressure sensor error
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[87]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[88]  := x_Spare;                                                         // 
(*Hoist*)         _102_From_PLC_to_HMI_MachStatus.STS_BOOL[89]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[90]  := IO.Winches.Cmd.FL_Wind;                                          // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[91]  := IO.Winches.Cmd.FL_Unwind;                                        // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[92]  := IO.Winches.Cmd.RL_Wind;                                          // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[93]  := IO.Winches.Cmd.RL_Unwind;                                        // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[94]  := IO.Winches.Cmd.FR_Wind;                                          // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[95]  := IO.Winches.Cmd.FR_Unwind;                                        // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[96]  := IO.Winches.Cmd.RR_Wind;                                          // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[97]  := IO.Winches.Cmd.RR_Unwind;                                        // The operator is commanding the winches
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[98]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[99]  := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[100] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[101] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[102] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[103] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[104] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[105] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[106] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[107] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[108] := x_Spare;                                                         // 
(*Winches*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[109] := IO.Pvg_Services.Sts.Oil_Pressure.xError_Sensor;                  // Pressure sensor error
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[110] := IO.Fuel_Tank.Sts.Fuel_Level_1.xError_Sensor;                     // Anomaly on fuel tank level sensor
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[111] := IO.Fuel_Tank.Sts.Fuel_Level_2.xError_Sensor;                     // Anomaly on fual tenk level sensor
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[112] := IO.Fuel_Tank.Sts.Tank_1_Level_Low;                               // Fuel tank 1 below threshold
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[113] := IO.Fuel_Tank.Sts.Tank_2_Level_Low;                               // Fuel tank 2 below threshold
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[114] := IO.Fuel_Tank.Sts.Tank_1_Level_Empty;                             // Fuel tank 1 empty
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[115] := IO.Fuel_Tank.Sts.Tank_2_Level_Empty;                             // Fuel tank 2 empty
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[116] := IO.Fuel_Tank.Cmd.Left_Tank;                                      // Left tank in use
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[117] := IO.Fuel_Tank.Cmd.Right_Tank;                                     // Right tank in use
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[118] := x_Spare;                                                         // 
(*Fuel Tank*)     _102_From_PLC_to_HMI_MachStatus.STS_BOOL[119] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[120] := IO.Internal_Signal.Sts.All_Parameters_Received;                  // All parameters written properly after a restore
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[121] := IO.Internal_Signal.Sts.Error_Writing_All_Parameter;              // Error during writing all parameters
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[122] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[123] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[124] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[125] := IO.System.Sts.PLC_ShuttingDown;                                  // PLC is shutting down
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[126] := IO.System.Cmd.Switch_Off_HMI;                                    // Command HMI shutdown
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[127] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[128] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[129] := IO.MachineMode.Sts.Inhibit_Change_Mode_To_Navi;                  // The navi mode switching is inhibited by some conditions
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[130] := IO.MachineMode.Sts.Inhibit_Change_Mode_To_Work;                  // The work mode switching is inhibited by some conditions
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[131] := IO.MachineMode.Sts.Inhibit_Navi_Show_Popup;                      // Show popup navi mode is inhibited
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[132] := IO.MachineMode.Sts.Inhibit_Work_Show_Popup;                      // Show popup work mode is inhibited
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[133] := IO.MachineMode.Sts.Press_Enable_Show_Popup;                      // Show popup enable is not pressed correctly
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[134] := IO.MachineMode.Sts.NotPossible_In_Work_Show_Popup;               // Operation not possible in work mode
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[135] := IO.MachineMode.Sts.NotPossible_In_Navi_Show_Popup;               // Operation not possible in navi mode
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[136] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[137] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[138] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[139] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[140] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[141] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[142] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[143] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[144] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[145] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[146] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[147] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[148] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[149] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[150] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[151] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[152] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[153] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[154] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[155] := IO.Event.Sts.Warning_Present;                                    // At least one warning is active in the machine
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[156] := IO.Event.Sts.Alarm_Present;                                      // At least one alarm is active in the machine
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[157] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[158] := x_Spare;                                                         // 
(*Mach Status*)   _102_From_PLC_to_HMI_MachStatus.STS_BOOL[159] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[160] := IO.Network.CAN.Sts.DeviceStatus._05_CR2016_CP_Connection_Ok;     // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[161] := IO.Network.CAN.Sts.DeviceStatus._06_CR2016_OC_Connection_Ok;     // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[162] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[163] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[164] := IO.Network.CAN.Sts.DeviceStatus._15_CR2050_HYD_Connection_Ok;    // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[165] := IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok;        // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[166] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[167] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[168] := IO.Network.CAN.Sts.DeviceStatus._20_CR2012_Connection_Ok;        // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[169] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[170] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[171] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[172] := IO.Network.CAN.Sts.DeviceStatus.Engine_Connection_Ok;            // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[173] := IO.Network.CAN.Sts.DeviceStatus.Joystick_Connection_Ok;          // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[174] := IO.Network.CAN.Sts.DeviceStatus.Inclinometer_Connection_Ok;      // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[175] := IO.Network.CAN.Sts.DeviceStatus.Propeller_Encoder_Connection_Ok; // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[176] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[177] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[178] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[179] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[180] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[181] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[182] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[183] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[184] := IO.Network.CAN.Sts.Ch_Status[0].xActive;                         // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[185] := IO.Network.CAN.Sts.Ch_Status[0].xError;                          // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[186] := IO.Network.CAN.Sts.Ch_Status[0].xWarningRx;                      // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[187] := IO.Network.CAN.Sts.Ch_Status[0].xWarningTx;                      // Can diagnostic Channel 0
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[188] := IO.Network.CAN.Sts.Ch_Status[1].xActive;                         // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[189] := IO.Network.CAN.Sts.Ch_Status[1].xError;                          // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[190] := IO.Network.CAN.Sts.Ch_Status[1].xWarningRx;                      // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[191] := IO.Network.CAN.Sts.Ch_Status[1].xWarningTx;                      // Can diagnostic Channel 1
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[192] := IO.Network.CAN.Sts.Ch_Status[2].xActive;                         // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[193] := IO.Network.CAN.Sts.Ch_Status[2].xError;                          // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[194] := IO.Network.CAN.Sts.Ch_Status[2].xWarningRx;                      // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[195] := IO.Network.CAN.Sts.Ch_Status[2].xWarningTx;                      // Can diagnostic Channel 2
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[196] := IO.Network.CAN.Sts.Ch_Status[3].xActive;                         // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[197] := IO.Network.CAN.Sts.Ch_Status[3].xError;                          // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[198] := IO.Network.CAN.Sts.Ch_Status[3].xWarningRx;                      // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[199] := IO.Network.CAN.Sts.Ch_Status[3].xWarningTx;                      // Can diagnostic Channel 3
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[200] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[201] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[202] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[203] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[204] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[205] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[206] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[207] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[208] := x_Spare;                                                         // 
(*Network*)       _102_From_PLC_to_HMI_MachStatus.STS_BOOL[209] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[210] := IO.Engine.Sts.Running;                                           // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[211] := IO.Engine.Sts.Warning;                                           // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[212] := IO.Engine.Sts.Alarm;                                             // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[213] := IO.Engine.Sts.Low_Oil_Pressure;                                  // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[214] := IO.Engine.Sts.Derating_Active;                                   // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[215] := IO.Engine.Sts.Regen.Request;                                     // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[216] := IO.Engine.Sts.Regen.Inhibit;                                     // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[217] := IO.Engine.Sts.Regen.Active;                                      // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[218] := IO.Engine.Sts.Regen.Temperature;                                 // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[219] := IO.Engine.Sts.Regen.Error;                                       // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[220] := IO.Engine.Sts.WaitBeforeCuttingPower;                            // Wait to shutdown PLC untile hte stage V purge is complete
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[221] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[222] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[223] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[224] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[225] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[226] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[227] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[228] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[229] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[230] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[231] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[232] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[233] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[234] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[235] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[236] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[237] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[238] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[239] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[240] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[241] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[242] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[243] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[244] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[245] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[246] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[247] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[248] := x_Spare;                                                         // 
(*Engine*)        _102_From_PLC_to_HMI_MachStatus.STS_BOOL[249] := x_Spare;                                                         // 

////////////////////////////////////////////////////////////
// STS INT
////////////////////////////////////////////////////////////

(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[0]   := IO.Statistics.Sts.Dredging_Pump_Service_Hours;                //[h]     Dredging pump working hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[1]   := IO.Statistics.Sts.Excavators_Service_Hours;                   //[h]     Excavator working hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[2]   := IO.Statistics.Sts.Engine_Service_Hours;                       //[h]     Engine running hours since last maintenance
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[3]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[4]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[5]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[6]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[7]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[8]   := i_Spare;                                                      //[-]     
(*Statistics*)     _102_From_PLC_to_HMI_MachStatus.STS_INT[9]   := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[10]  := IO.Pump_Dredge.Sts.Setpoint_Perc_Ramped_Main;                 //[%]     Dredging pump speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[11]  := IO.Pump_Dredge.Sts.Oil_Pressure.Main_Circuit.iValue_x10;      //[bar]   Dredging pump oil pressure main circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[12]  := IO.Pump_Dredge.Sts.Oil_Pressure.Secondary_Circuit.iValue_x10; //[bar]   Dredging pump oil pressure secondary circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[13]  := IO.Pump_Dredge.Sts.Oil_Flow.iValue_x10;                       //[l/min] Dredging pump oil flow
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[14]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[15]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[16]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[17]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[18]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[19]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[20]  := IO.Excavators.Sts.Setpoint_Percentage;                        //[%]     Excavators speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[21]  := IO.Excavators.Sts.Oil_Pressure.Main_Circuit.iValue_x10;       //[bar]   Excavators oil pressure main circuit
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[22]  := IO.Excavators.Sts.Oil_Pressure.Booster.iValue_x10;            //[bar]   Excavators oil pressure booster
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[23]  := IO.Excavators.Sts.Oil_Flow.iValue_x10;                        //[l/min] Excavators oil flow
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[24]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[25]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[26]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[27]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[28]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[29]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[30]  := IO.Propeller.Sts.Setpoint_Perc_Ramped_Main;                   //[%]     Propeller speed command
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[31]  := IO.Propeller.Sts.Oil_Pressure.Main_Circuit.iValue_x10;        //[bar]   Propeller oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[32]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[33]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[34]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[35]  := IO.Hoist.Sts.Oil_Pressure.Main_Circuit.iValue_x10;            //[bar]   Hoist oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[36]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[37]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[38]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[39]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[40]  := IO.Pvg_Services.Sts.Oil_Pressure.iValue_x10;                  //[bar]   Service PVG oil pressure
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[41]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[42]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[43]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[44]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[45]  := IO.Oil.Sts.Oil_Level.iValue_x10;                              //[%]     Oil tank level
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[46]  := IO.Oil.Sts.Oil_Temp.iValue_x10;                               //[°C]    Oil tank temperature
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[47]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[48]  := i_Spare;                                                      //[-]     
(*Hydraulic*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[49]  := i_Spare;                                                      //[-]     
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[50]  := IO.Slurry.Sts.Density.iValue_x10;                             //[g/l]   Density of slurry
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[51]  := IO.Slurry.Sts.Flow.iValue_x10;                                //[m3/h]  Flow of slurry
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[52]  := IO.Slurry.Sts.Production;                                     //[Kg/h]  Actual production
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[53]  := i_Spare;                                                      //[-]     
(*Slurry*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[54]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[55]  := IO.System.Sts.Battery_Voltage;                                //[V]     Battery voltage
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[56]  := IO.Internal_Signal.Sts.MachineStatus;                         //[-]     Machine status
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[57]  := IO.Internal_Signal.Sts.WorkingMode;                           //[-]     Working mode (1=Navigation,2=Dredging)
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[58]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[59]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[60]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[61]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[62]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[63]  := i_Spare;                                                      //[-]     
(*Machine status*) _102_From_PLC_to_HMI_MachStatus.STS_INT[64]  := IO.System.Sts.INT_From_PLC;                                   //[-]     Incremental INT to test the communication
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[65]  := IO.Engine.Sts.Rpm;                                            //[rpm]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[66]  := IO.Engine.Sts.Torque;                                         //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[67]  := IO.Fuel_Tank.Sts.Fuel_Level_1.iValue_x10;                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[68]  := IO.Fuel_Tank.Sts.Fuel_Level_2.iValue_x10;                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[69]  := IO.Engine.Sts.Fuel_Consumption;                               //[l/h]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[70]  := IO.Engine.Sts.Oil_Pressure;                                   //[kpa]   
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[71]  := IO.Engine.Sts.Water_Temp;                                     //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[72]  := IO.Engine.Sts.IntakeAirTemp;                                  //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[73]  := IO.Engine.Sts.Load;                                           //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[74]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[75]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[76]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[77]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[78]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[79]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[80]  := IO.Engine.Sts.Urea_Level;                                     //[%]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[81]  := IO.Engine.Sts.Urea_Temp;                                      //[°C]    
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[82]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[83]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[84]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[85]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[86]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[87]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[88]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[89]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[90]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[91]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[92]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[93]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[94]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[95]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[96]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[97]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[98]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[99]  := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[100] := IO.Engine.Sts.Percentage_Shutting_Down;                       //[%]     Percentage left until power can be cut from the motor
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[101] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[102] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[103] := i_Spare;                                                      //[-]     
(*Engine*)         _102_From_PLC_to_HMI_MachStatus.STS_INT[104] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[105] := IO.Propeller.Sts.Joystick.Joystick_Axis_X;                    //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[106] := IO.Propeller.Sts.Joystick.Joystick_Axis_Y;                    //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[107] := IO.Propeller.Sts.Encoder.iValue_x10;                          //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[108] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[109] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[110] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[111] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[112] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[113] := i_Spare;                                                      //[-]     
(*Propeller*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[114] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[115] := IO.Hoist.Sts.Pump_Depth.iValue_x10;                           //[dm]    Pump depth
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[116] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[117] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[118] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[119] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[120] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[121] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[122] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[123] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[124] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[125] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[126] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[127] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[128] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[129] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[130] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[131] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[132] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[133] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[134] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[135] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[136] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[137] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[138] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[139] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[140] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[141] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[142] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[143] := i_Spare;                                                      //[-]     
(*Movements*)      _102_From_PLC_to_HMI_MachStatus.STS_INT[144] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[145] := IO.Network.CAN.Sts.Ch_Status[0].iErrorCntRx;                  //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[146] := IO.Network.CAN.Sts.Ch_Status[0].iErrorCntTx;                  //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[147] := IO.Network.CAN.Sts.Ch_Status[0].DiagInfo;                     //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[148] := IO.Network.CAN.Sts.Ch_Status[0].iBusLoad;                     //[-]     Can diagnostic Channel 0
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[149] := IO.Network.CAN.Sts.Ch_Status[1].iErrorCntRx;                  //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[150] := IO.Network.CAN.Sts.Ch_Status[1].iErrorCntTx;                  //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[151] := IO.Network.CAN.Sts.Ch_Status[1].DiagInfo;                     //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[152] := IO.Network.CAN.Sts.Ch_Status[1].iBusLoad;                     //[-]     Can diagnostic Channel 1
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[153] := IO.Network.CAN.Sts.Ch_Status[2].iErrorCntRx;                  //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[154] := IO.Network.CAN.Sts.Ch_Status[2].iErrorCntTx;                  //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[155] := IO.Network.CAN.Sts.Ch_Status[2].DiagInfo;                     //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[156] := IO.Network.CAN.Sts.Ch_Status[2].iBusLoad;                     //[-]     Can diagnostic Channel 2
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[157] := IO.Network.CAN.Sts.Ch_Status[3].iErrorCntRx;                  //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[158] := IO.Network.CAN.Sts.Ch_Status[3].iErrorCntTx;                  //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[159] := IO.Network.CAN.Sts.Ch_Status[3].DiagInfo;                     //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[160] := IO.Network.CAN.Sts.Ch_Status[3].iBusLoad;                     //[-]     Can diagnostic Channel 3
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[161] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[162] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[163] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[164] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[165] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[166] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[167] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[168] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[169] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[170] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[171] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[172] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[173] := i_Spare;                                                      //[-]     
(*CAN Network*)    _102_From_PLC_to_HMI_MachStatus.STS_INT[174] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[175] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[176] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[177] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[178] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[179] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[180] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[181] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[182] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[183] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[184] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[185] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[186] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[187] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[188] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[189] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[190] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[191] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[192] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[193] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[194] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[195] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[196] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[197] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[198] := i_Spare;                                                      //[-]     
(*Spare*)          _102_From_PLC_to_HMI_MachStatus.STS_INT[199] := i_Spare;                                                      //[-]     

////////////////////////////////////////////////////////////
// STS DINT
////////////////////////////////////////////////////////////

(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[0] := IO.Statistics.Sts.Dredging_Pump_Working_Hours; // Dredging pump working hours
(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[1] := IO.Statistics.Sts.Excavators_Working_Hours;    // Excavator working hours
(*Statistics*) _102_From_PLC_to_HMI_MachStatus.STS_DINT[2] := IO.Statistics.Sts.Engine_Running_Hours;        // Dredging pump working hours since last maintenance